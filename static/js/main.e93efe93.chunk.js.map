{"version":3,"sources":["components/PlayerDashboard/PlayerDashboard.module.css","components/StartScreen/StartScreen.module.css","components/Game/Game.module.css","components/CurrentPlayerDashboard/CurrentPlayerDashboard.module.css","components/GameBoard/GameBoardCell/GameBoardCell.module.css","components/Settings/Settings.module.css","components/BestScores/BestScores.module.css","components/App/App.module.css","components/GameBoard/GameBoard.module.css","components/Timer/Timer.module.css","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.module.css","components/StartScreen/StartScreen.js","store/actions/startScreenOnOff.js","store/actions/gameOnOff.js","store/actions/settingsOnOff.js","store/actions/bestScoresOnOff.js","store/reducers/gameBoard.js","store/reducers/appNavigation.js","store/reducers/players.js","store/reducers/index.js","store/store.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","store/actions/countMovesRed.js","store/actions/countMovesYellow.js","store/actions/gameOver.js","utils/checkWinner.js","store/actions/currentColCursorOver.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/CurrentPlayerDashboard/CurrentPlayerDashboard.js","components/CurrentPlayerDashboard/index.js","components/PlayerDashboard/PlayerDashboard.js","components/PlayerDashboard/index.js","components/Timer/Timer.js","components/Timer/index.js","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.js","components/ReturnToStartScreenBtn/index.js","store/actions/returnToStartScreen.js","components/Game/Game.js","components/Game/index.js","components/Settings/Settings.js","components/Settings/index.js","components/BestScores/BestScores.js","components/BestScores/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["module","exports","StartScreen","isGameOn","useSelector","state","appNavigation","isStartScreenOn","isSettingsOn","isBestScoresOn","dispatch","useDispatch","startScreenShowHide","type","payload","startScreenOnOffAction","className","styles","wrapper","button","onClick","e","preventDefault","gameOnOffAction","startGame","settingsOnOffAction","settingsOn","bestScoresOnOffAction","bestScoresOn","initialState","lastDiscDropCell","discColor","col","row","currentColCursorOver","currentPlayer","board","isGameOver","playerOne","color","moves","playerTwo","combineReducers","gameBoard","action","player","newBoard","slice","push","length","colNum","players","store","createStore","reducer","subscribe","console","log","getState","GameBoardCell","props","rowNum","currentCellColor","cellColorClass","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","countMovesRedAction","countMovesRed","countMovesYellowAction","countMovesYellow","gameOverAction","gameOver","currentBoardArray","isWinner","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","checkWinner","onMouseOver","currentColCursorOverAction","changeCurrentColNum","cell","join","GameBoard","cells","CurrentPlayerDashboard","currentCol","style","left","chip","PlayerDashboard","lastPlayerColor","wrapperClasses","inactive","title","winner","Timer","useState","time","setTime","useEffect","timerID","setInterval","clearInterval","min","Math","floor","sec","addZero","num","parseInt","ReturnToStartScreenBtn","Game","Settings","BestScores","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e93efe93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayerDashboard_wrapper__3nRYp\",\"inactive\":\"PlayerDashboard_inactive__cIl0F\",\"player\":\"PlayerDashboard_player__CpWVs\",\"moves\":\"PlayerDashboard_moves__1YVks\",\"title\":\"PlayerDashboard_title__2R2El\",\"chip\":\"PlayerDashboard_chip__3-EPz\",\"red\":\"PlayerDashboard_red__r7CtE\",\"yellow\":\"PlayerDashboard_yellow__gkkE5\",\"winner\":\"PlayerDashboard_winner__17AA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartScreen_wrapper__2GBHR\",\"button\":\"StartScreen_button__3fQxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__AT8P3\",\"nav-wrapper\":\"Game_nav-wrapper__1BTj0\",\"game-wrapper\":\"Game_game-wrapper__1IEdb\",\"time-wrapper\":\"Game_time-wrapper__eyjE8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CurrentPlayerDashboard_wrapper__D11zR\",\"chip-wrapper\":\"CurrentPlayerDashboard_chip-wrapper__1CpMj\",\"chip\":\"CurrentPlayerDashboard_chip__3Mqty\",\"red\":\"CurrentPlayerDashboard_red__15Sgo\",\"yellow\":\"CurrentPlayerDashboard_yellow__OGj4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"cell\":\"GameBoardCell_cell__2Z2tO\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Settings_wrapper__2Vhbh\",\"nav-wrapper\":\"Settings_nav-wrapper__I0eEo\",\"title\":\"Settings_title__2_HNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BestScores_wrapper__elE_s\",\"nav-wrapper\":\"BestScores_nav-wrapper__30jJb\",\"title\":\"BestScores_title__31Z_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-wrapper\":\"App_app-wrapper__l2jfx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Timer_time__1MZ_W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ReturnToStartScreenBtn_button__2vgSA\"};","import styles from './StartScreen.module.css';\r\nimport { gameOnOffAction } from '../../store/actions/gameOnOff';\r\nimport { settingsOnOffAction } from '../../store/actions/settingsOnOff';\r\nimport { startScreenOnOffAction } from '../../store/actions/startScreenOnOff';\r\nimport { bestScoresOnOffAction } from '../../store/actions/bestScoresOnOff';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction StartScreen() {\r\n\r\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\r\n  const isStartScreenOn = useSelector(state => state.appNavigation.isStartScreenOn);\r\n  const isSettingsOn = useSelector(state => state.appNavigation.isSettingsOn);\r\n  const isBestScoresOn = useSelector(state => state.appNavigation.isBestScoresOn);\r\n  const dispatch = useDispatch();\r\n  const startGame = (isGameOn) => dispatch(gameOnOffAction(isGameOn));\r\n  const startScreenShowHide = (isStartScreenOn) => dispatch(startScreenOnOffAction(isStartScreenOn));\r\n  const settingsOn = (isSettingsOn) => dispatch(settingsOnOffAction(isSettingsOn));\r\n  const bestScoresOn = (isBestScoresOn) => dispatch(bestScoresOnOffAction(isBestScoresOn));\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <button className={styles.button}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  startGame(isGameOn);\r\n                  startScreenShowHide(isStartScreenOn);\r\n                }}>Start Game</button>\r\n        <button className={styles.button}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  settingsOn(isSettingsOn);\r\n                  startScreenShowHide(isStartScreenOn);\r\n                }}>Settings</button>\r\n        <button className={styles.button}\r\n                onClick={(e) => {\r\n                  bestScoresOn(isBestScoresOn);\r\n                  startScreenShowHide(isStartScreenOn);\r\n                  e.preventDefault();\r\n                }}>Best Scores</button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default StartScreen;","export const startScreenOnOffAction = (isStartScreenOn) => {\r\n  return {\r\n    type: 'START_SCREEN_ON_OFF',\r\n    payload: {\r\n      isStartScreenOn\r\n    }\r\n  };\r\n};","export const gameOnOffAction = (isGameOn) => {\r\n  return {\r\n    type: 'GAME_ON_OFF',\r\n    payload: {\r\n      isGameOn: isGameOn\r\n    }\r\n  };\r\n};","export const settingsOnOffAction = (isSettingsOn) => {\r\n  return {\r\n    type: 'SETTINGS_ON_OFF',\r\n    payload: {\r\n      isSettingsOn\r\n    }\r\n  };\r\n};","export const bestScoresOnOffAction = (isBestScoresOn) => {\r\n  return {\r\n    type: 'BEST_SCORES_ON_OFF',\r\n    payload: {\r\n      isBestScoresOn\r\n    }\r\n  };\r\n};","const initialState = {\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentColCursorOver: 0,\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    case 'CHANGE_CURRENT_COL_CURSOR_OVER': {\r\n      const { colNum } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentColCursorOver: colNum\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        lastDiscDropCell: {\r\n          discColor: '',\r\n          col: null,\r\n          row: null\r\n        },\r\n        currentColCursorOver: 0,\r\n        currentPlayer: 'red',\r\n        board: [\r\n          [], // col 0 - row 0 is bottom, row 5 is top\r\n          [], // col 1\r\n          [], // col 2\r\n          [], // col 3\r\n          [], // col 4\r\n          [], // col 5\r\n          [], // col 6\r\n        ]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","const initialState = {\r\n  isStartScreenOn: true,\r\n  isGameOn: false,\r\n  isSettingsOn: false,\r\n  isBestScoresOn: false,\r\n  isGameOver: false\r\n};\r\n\r\nconst appNavigation = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'START_SCREEN_ON_OFF': {\r\n      const { isStartScreenOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isStartScreenOn: !isStartScreenOn\r\n      }\r\n    }\r\n    case 'GAME_ON_OFF': {\r\n      const { isGameOn } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          isGameOn: !isGameOn\r\n      }\r\n    }\r\n    case 'SETTINGS_ON_OFF': {\r\n      const { isSettingsOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isSettingsOn: !isSettingsOn\r\n      }\r\n    }\r\n    case 'BEST_SCORES_ON_OFF': {\r\n      const { isBestScoresOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isBestScoresOn: !isBestScoresOn\r\n      }\r\n    }\r\n    case 'GAME_OVER': {\r\n      const { isGameOver } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isGameOver: isGameOver\r\n      }\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        isStartScreenOn: true,\r\n        isGameOn: false,\r\n        isSettingsOn: false,\r\n        isBestScoresOn: false,\r\n        isGameOver: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { appNavigation };","const initialState = {\r\n  playerOne: {\r\n    color: 'red',\r\n    moves: 0\r\n  },\r\n  playerTwo: {\r\n    color: 'yellow',\r\n    moves: 0\r\n  }\r\n};\r\n\r\nconst players = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COUNT_MOVES_RED': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerOne.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'COUNT_MOVES_YELLOW': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerTwo.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerTwo: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: 'red',\r\n          moves: 0\r\n        },\r\n        playerTwo: {\r\n          color: 'yellow',\r\n          moves: 0\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { players };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\nimport { appNavigation } from './appNavigation';\r\nimport { players } from './players';\r\n\r\nexport default combineReducers({ gameBoard, appNavigation, players });","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport { countMovesRedAction } from '../../../store/actions/countMovesRed';\r\nimport { countMovesYellowAction } from '../../../store/actions/countMovesYellow';\r\nimport { currentColCursorOverAction } from '../../../store/actions/currentColCursorOver';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\nimport { gameOverAction } from '../../../store/actions/gameOver';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = state.appNavigation.isGameOver;\r\n\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === playerOne.color) ? playerTwo.color : playerOne.color;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n  const countMovesRed = (player) => dispatch(countMovesRedAction(player));\r\n  const countMovesYellow = (player) => dispatch(countMovesYellowAction(player));\r\n  const gameOver = (isGameOver) => dispatch(gameOverAction(isGameOver));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  //define func by condition. Lock Click if Game Over\r\n  const handleClickByCell = () => {\r\n    if ( state.gameBoard.board[colNum].length < 6) {\r\n      if (isGameOver) return;\r\n      changePlayer(currentPlayer);\r\n      dropDiscToColumn(colNum, currentPlayer);\r\n      if (currentPlayer === playerOne.color) countMovesRed(currentPlayer);\r\n      if (currentPlayer === playerTwo.color) countMovesYellow(currentPlayer);\r\n      gameOver(checkWinner());\r\n    }\r\n  };\r\n\r\n  const changeCurrentColNum = (colNum) => dispatch(currentColCursorOverAction(colNum));\r\n\r\n  //define func by condition. Lock movement of Current Chip if Game Over\r\n  const handleMouseOver = () => {\r\n    if (isGameOver) return;\r\n    changeCurrentColNum(colNum);\r\n  };\r\n\r\n  return (\r\n      <div\r\n          className={styles.wrapper}\r\n          onClick={handleClickByCell}\r\n          onMouseOver={handleMouseOver}\r\n      >\r\n        <div className={[styles.cell, styles[cellColorClass]].join(' ')}>\r\n          {/*row: {rowNum}, col: {colNum}*/}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","export const countMovesRedAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_RED',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const countMovesYellowAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_YELLOW',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const gameOverAction = (isGameOver) => {\r\n  return {\r\n    type: 'GAME_OVER',\r\n    payload: {\r\n      isGameOver: isGameOver\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  let isWinner = false;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i <= 6; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i <= 5; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i <= 6 && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j <= 5); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i <= 6 && j <= 5); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n    isWinner = true;\r\n  }\r\n\r\n  return isWinner;\r\n};","export const currentColCursorOverAction = (colNum) => {\r\n  return {\r\n    type: 'CHANGE_CURRENT_COL_CURSOR_OVER',\r\n    payload: {\r\n      colNum\r\n    }\r\n  };\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = 5; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j <= 6; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import { useSelector } from 'react-redux';\r\nimport styles from './CurrentPlayerDashboard.module.css';\r\n\r\nfunction CurrentPlayerDashboard(props) {\r\n  const currentPlayer = useSelector(state => state.gameBoard.currentPlayer);\r\n\r\n  const currentCol = useSelector(state => state.gameBoard.currentColCursorOver);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        {/*Current Player:*/}\r\n        <div className={styles['chip-wrapper']}\r\n             style={{\r\n               left: currentCol * 50 //shift on 50px - width of cell\r\n             }}>\r\n          <div className={[styles.chip, styles[currentPlayer]].join(' ')}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CurrentPlayerDashboard;","import CurrentPlayerDashboard from './CurrentPlayerDashboard';\r\n\r\nexport default CurrentPlayerDashboard;","import styles from './PlayerDashboard.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport store from '../../store/store'\r\n\r\nfunction PlayerDashboard(props) {\r\n  const player = props.player;\r\n\r\n  const state = store.getState();\r\n\r\n  //const players = useSelector(state => state.players);\r\n  //const isGameOver = useSelector(state => state.appNavigation.isGameOver);\r\n  //const lastPlayerColor = useSelector(state => state.gameBoard.lastDiscDropCell.discColor);\r\n  const currentPlayer = useSelector(state => state.gameBoard.currentPlayer);\r\n  //const { currentPlayer } = state.gameBoard;\r\n  const lastPlayerColor = state.gameBoard.lastDiscDropCell.discColor;\r\n  const { isGameOver } = state.appNavigation;\r\n  const { players } = state;\r\n\r\n  let moves = (player === state.players.playerOne.color)\r\n      ? players.playerOne.moves\r\n      : players.playerTwo.moves;\r\n\r\n  const wrapperClasses = (player === currentPlayer)\r\n      ? [styles.wrapper].join(' ')\r\n      : [styles.wrapper, styles.inactive].join(' ');\r\n\r\n  return (\r\n      <div className={wrapperClasses}>\r\n        <div className={styles.player}>\r\n          <div className={styles.title}>Player</div>\r\n          <div className={[styles.chip, styles[player]].join(' ')}></div>\r\n        </div>\r\n        <div className={styles.moves}>Moves: {moves}</div>\r\n        { (isGameOver && player === lastPlayerColor)\r\n          && <div className={styles.winner}>WINNER!!!</div>}\r\n      </div>\r\n  );\r\n}\r\n\r\nPlayerDashboard.propTypes = {\r\n  player: PropTypes.string\r\n};\r\n\r\nexport default PlayerDashboard;\r\n","import PlayerDashboard from './PlayerDashboard';\r\n\r\nexport default PlayerDashboard;","import React from 'react';\r\nimport styles from './Timer.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport store from '../../store/store';\r\n\r\nfunction Timer(props) {\r\n\r\n  const state = store.getState();\r\n  const { isGameOver } = state.appNavigation;\r\n\r\n  const [ time, setTime ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isGameOver) return;\r\n    const timerID = setInterval(\r\n        () => setTime(time + 1),\r\n        1000\r\n    );\r\n    return () => clearInterval(timerID);\r\n  });\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  const addZero = (num) => {\r\n    return ((parseInt(num, 10) < 10) ? '0' : '') + num;\r\n  };\r\n\r\n  return (\r\n      <div className={styles.time}>Time: {addZero(min)}:{addZero(sec)}</div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import Timer from './Timer';\r\n\r\nexport default Timer;","import { useDispatch } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport styles from './ReturnToStartScreenBtn.module.css';\r\n\r\nfunction ReturnToStartScreenBtn() {\r\n  const dispatch = useDispatch();\r\n\r\n  const returnToStartScreen = () => dispatch(returnToStartScreenAction());\r\n\r\n  return (\r\n      <button className={styles.button} onClick={(e) => {\r\n        e.preventDefault();\r\n        returnToStartScreen();\r\n      }}>Back to menu</button>\r\n  );\r\n}\r\n\r\nexport default ReturnToStartScreenBtn;","import ReturnToStartScreenBtn from './ReturnToStartScreenBtn';\r\n\r\nexport default ReturnToStartScreenBtn;","export const returnToStartScreenAction = () => {\r\n  return {\r\n    type: 'RETURN_TO_START_SCREEN'\r\n  }\r\n};","import styles from './Game.module.css';\r\nimport GameBoard from '../GameBoard';\r\nimport CurrentPlayerDashboard from '../CurrentPlayerDashboard';\r\nimport PlayerDashboard from '../PlayerDashboard';\r\nimport store from '../../store/store';\r\nimport Timer from '../Timer';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn';\r\n\r\nfunction Game(props) {\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles['nav-wrapper']}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div className={styles['game-wrapper']}>\r\n          <PlayerDashboard player={playerOne.color}/>\r\n          <div>\r\n            <CurrentPlayerDashboard/>\r\n            <GameBoard/>\r\n          </div>\r\n          <PlayerDashboard player={playerTwo.color}/>\r\n        </div>\r\n        <div className={styles['time-wrapper']}>\r\n          <Timer/>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './Game';\r\n\r\nexport default Game;","import styles from './Settings.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\n\r\nfunction Settings() {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles['nav-wrapper']}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Settings</h2>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import Settings from './Settings';\r\n\r\nexport default Settings;","import styles from './BestScores.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\n\r\nfunction BestScores() {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles['nav-wrapper']}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Best Scores</h2>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default BestScores;","import BestScores from './BestScores';\r\n\r\nexport default BestScores;","import styles from './App.module.css';\nimport StartScreen from '../StartScreen/StartScreen';\nimport { useSelector } from 'react-redux';\nimport Game from '../Game';\nimport Settings from '../Settings';\nimport BestScores from '../BestScores';\n\nfunction App() {\n\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\n  const isStartScreenOn = useSelector(state => state.appNavigation.isStartScreenOn);\n  const isSettingsOn = useSelector(state => state.appNavigation.isSettingsOn);\n  const isBestScoresOn = useSelector(state => state.appNavigation.isBestScoresOn);\n\n  return (\n    <div className={styles['app-wrapper']}>\n      App: CONNECT FOUR (beta)\n      {isStartScreenOn && <StartScreen/>}\n      {isGameOn && <Game/>}\n      {isSettingsOn && <Settings/>}\n      {isBestScoresOn && <BestScores/>}\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}