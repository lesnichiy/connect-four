{"version":3,"sources":["components/App/App.module.css","components/GameBoard/GameBoard.module.css","store/reducers/gameBoard.js","store/reducers/index.js","store/store.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","utils/checkWinner.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/GameDashboard/GameDashboard.js","components/GameDashboard/index.js","components/App/App.js","components/App/index.js","index.js","components/GameBoard/GameBoardCell/GameBoardCell.module.css"],"names":["module","exports","initialState","players","playerOne","playerTwo","lastDiscDropCell","discColor","col","row","currentPlayer","board","combineReducers","gameBoard","state","action","type","player","payload","newBoard","slice","push","length","store","createStore","reducer","subscribe","console","log","getState","GameBoardCell","props","rowNum","colNum","dispatch","useDispatch","useSelector","currentCellColor","cellColorClass","className","styles","wrapper","join","onClick","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","currentBoardArray","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","checkWinner","GameBoard","cells","GameDashboard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b1cbd7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-wrapper\":\"App_app-wrapper__l2jfx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","const initialState = {\r\n  players: {\r\n    playerOne: 'red',\r\n    playerTwo: 'yellow'\r\n  },\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\n\r\nexport default combineReducers({ gameBoard });\r\n","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === state.gameBoard.players.playerOne) ? state.gameBoard.players.playerTwo : state.gameBoard.players.playerOne;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  return (\r\n      <div\r\n          className={[styles.wrapper, styles[cellColorClass]].join(' ')}\r\n          onClick={() => {\r\n              if ( state.gameBoard.board[colNum].length < 6 ) {\r\n                changePlayer(currentPlayer);\r\n                dropDiscToColumn(colNum, currentPlayer);\r\n                checkWinner();\r\n              }\r\n            }\r\n          }\r\n      >\r\n        row: {rowNum}, col: {colNum}\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i <= 6; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i <= 5; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i <= 6 && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j <= 5); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i <= 6 && j <= 5); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n  }\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = 5; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j <= 6; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import store from '../../store/store';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction GameDashboard(props) {\r\n  const state = store.getState();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n\r\n  return (\r\n      <div>\r\n        Current Player: {currentPlayer}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default GameDashboard;","import GameDashboard from './GameDashboard';\r\n\r\nexport default GameDashboard;","import styles from './App.module.css';\nimport GameBoard from '../GameBoard';\nimport GameDashboard from '../GameDashboard';\n\nfunction App(props) {\n\n\n\n  return (\n    <div className={styles['app-wrapper']}>\n      App\n      <GameDashboard />\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};"],"sourceRoot":""}