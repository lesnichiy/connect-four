{"version":3,"sources":["components/GameBoard/GameBoardCell/GameBoardCell.module.css","components/CurrentPlayerDashboard/CurrentPlayerDashboard.module.css","components/App/App.module.css","components/Game/Game.module.css","components/GameBoard/GameBoard.module.css","components/StartScreen/StartScreen.js","store/actions/gameOnOff.js","store/actions/startScreenOnOff.js","store/reducers/gameBoard.js","store/reducers/appNavigation.js","store/reducers/players.js","store/reducers/index.js","store/store.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","store/actions/countMovesRed.js","store/actions/countMovesYellow.js","store/actions/gameOver.js","utils/checkWinner.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/CurrentPlayerDashboard/CurrentPlayerDashboard.js","components/CurrentPlayerDashboard/index.js","components/PlayerDashboard/PlayerDashboard.js","components/PlayerDashboard/index.js","components/Game/Game.js","components/Game/index.js","components/App/App.js","components/App/index.js","index.js","components/PlayerDashboard/PlayerDashboard.module.css","components/StartScreen/StartScreen.module.css"],"names":["module","exports","StartScreen","props","isGameOn","useSelector","state","appNavigation","isStartScreenOn","dispatch","useDispatch","className","styles","wrapper","button","onClick","type","payload","gameOnOffAction","startGame","startScreenOnOffAction","startScreenShowHide","initialState","lastDiscDropCell","discColor","col","row","currentPlayer","board","isSettingsOn","isBestScoresOn","isGameOver","playerOne","color","moves","playerTwo","combineReducers","gameBoard","action","player","newBoard","slice","push","length","players","store","createStore","reducer","subscribe","console","log","getState","GameBoardCell","handleClickByCell","rowNum","colNum","currentCellColor","cellColorClass","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","countMovesRedAction","countMovesRed","countMovesYellowAction","countMovesYellow","gameOverAction","gameOver","currentBoardArray","isWinner","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","checkWinner","join","GameBoard","cells","CurrentPlayerDashboard","chip","PlayerDashboard","lastPlayerColor","title","winner","Game","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d316a739.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chip\":\"CurrentPlayerDashboard_chip__3Mqty\",\"red\":\"CurrentPlayerDashboard_red__15Sgo\",\"yellow\":\"CurrentPlayerDashboard_yellow__OGj4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-wrapper\":\"App_app-wrapper__l2jfx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__AT8P3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","import styles from './StartScreen.module.css';\r\nimport { gameOnOffAction } from '../../store/actions/gameOnOff';\r\nimport { startScreenOnOffAction } from '../../store/actions/startScreenOnOff';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction StartScreen(props) {\r\n\r\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\r\n  const isStartScreenOn = useSelector(state => state.appNavigation.isStartScreenOn);\r\n  const dispatch = useDispatch();\r\n  const startGame = (isGameOn) => dispatch(gameOnOffAction(isGameOn));\r\n  const startScreenShowHide = (isStartScreenOn) => dispatch(startScreenOnOffAction(isStartScreenOn));\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <button className={styles.button}\r\n                onClick={() => {\r\n                  startGame(isGameOn);\r\n                  startScreenShowHide(isStartScreenOn);\r\n                }}>Start Game</button>\r\n        <button className={styles.button}>Settings</button>\r\n        <button className={styles.button}>Best Scores</button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default StartScreen;","export const gameOnOffAction = (isGameOn) => {\r\n  return {\r\n    type: 'GAME_ON_OFF',\r\n    payload: {\r\n      isGameOn: isGameOn\r\n    }\r\n  };\r\n};","export const startScreenOnOffAction = (isStartScreenOn) => {\r\n  return {\r\n    type: 'START_SCREEN_ON_OFF',\r\n    payload: {\r\n      isStartScreenOn\r\n    }\r\n  };\r\n};","const initialState = {\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","const initialState = {\r\n  isStartScreenOn: true,\r\n  isGameOn: false,\r\n  isSettingsOn: false,\r\n  isBestScoresOn: false,\r\n  isGameOver: false\r\n};\r\n\r\nconst appNavigation = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'START_SCREEN_ON_OFF': {\r\n      const { isStartScreenOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isStartScreenOn: !isStartScreenOn\r\n      }\r\n    }\r\n    case 'GAME_ON_OFF': {\r\n      const { isGameOn } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          isGameOn: !isGameOn\r\n      }\r\n    }\r\n    case 'SETTINGS_ON_OFF': {\r\n      const { isSettingsOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isSettingsOn\r\n      }\r\n    }\r\n    case 'BEST_SCORES_ON_OFF': {\r\n      const { isBestScoresOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isBestScoresOn\r\n      }\r\n    }\r\n    case 'GAME_OVER': {\r\n      const { isGameOver } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isGameOver: isGameOver\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { appNavigation };","const initialState = {\r\n  playerOne: {\r\n    color: 'red',\r\n    moves: 0\r\n  },\r\n  playerTwo: {\r\n    color: 'yellow',\r\n    moves: 0\r\n  }\r\n};\r\n\r\nconst players = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COUNT_MOVES_RED': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerOne.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'COUNT_MOVES_YELLOW': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerTwo.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerTwo: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { players };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\nimport { appNavigation } from './appNavigation';\r\nimport { players } from './players';\r\n\r\nexport default combineReducers({ gameBoard, appNavigation, players });","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport { countMovesRedAction } from '../../../store/actions/countMovesRed';\r\nimport { countMovesYellowAction } from '../../../store/actions/countMovesYellow';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\nimport { gameOverAction } from '../../../store/actions/gameOver';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = state.appNavigation.isGameOver;\r\n\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === playerOne.color) ? playerTwo.color : playerOne.color;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n  const countMovesRed = (player) => dispatch(countMovesRedAction(player));\r\n  const countMovesYellow = (player) => dispatch(countMovesYellowAction(player));\r\n  const gameOver = (isGameOver) => dispatch(gameOverAction(isGameOver));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  //define func by condition. Lock Click if Game Over\r\n  let handleClickByCell;\r\n  if (isGameOver) {\r\n    handleClickByCell = () => {};\r\n  } else {\r\n    handleClickByCell = () => {\r\n      if ( state.gameBoard.board[colNum].length < 6 ) {\r\n        changePlayer(currentPlayer);\r\n        dropDiscToColumn(colNum, currentPlayer);\r\n        if (currentPlayer === playerOne.color) countMovesRed(currentPlayer);\r\n        if (currentPlayer === playerTwo.color) countMovesYellow(currentPlayer);\r\n        gameOver(checkWinner());\r\n      }\r\n    };\r\n  }\r\n\r\n  return (\r\n      <div\r\n          className={[styles.wrapper, styles[cellColorClass]].join(' ')}\r\n          onClick={handleClickByCell}\r\n      >\r\n        {/*row: {rowNum}, col: {colNum}*/}\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","export const countMovesRedAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_RED',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const countMovesYellowAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_YELLOW',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const gameOverAction = (isGameOver) => {\r\n  return {\r\n    type: 'GAME_OVER',\r\n    payload: {\r\n      isGameOver: isGameOver\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  let isWinner = false;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i <= 6; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i <= 5; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i <= 6 && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j <= 5); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i <= 6 && j <= 5); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n    isWinner = true;\r\n  }\r\n\r\n  return isWinner;\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = 5; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j <= 6; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import { useSelector } from 'react-redux';\r\nimport styles from './CurrentPlayerDashboard.module.css';\r\n\r\nfunction CurrentPlayerDashboard(props) {\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n\r\n  return (\r\n      <div>\r\n        Current Player: <div className={[styles.chip, styles[currentPlayer]].join(' ')}></div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CurrentPlayerDashboard;","import CurrentPlayerDashboard from './CurrentPlayerDashboard';\r\n\r\nexport default CurrentPlayerDashboard;","import styles from './PlayerDashboard.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport store from '../../store/store'\r\n\r\nfunction PlayerDashboard(props) {\r\n  const player = props.player;\r\n\r\n  const state = store.getState();\r\n\r\n  const players = useSelector(state => state.players);\r\n  const isGameOver = useSelector(state => state.appNavigation.isGameOver);\r\n  const lastPlayerColor = useSelector(state => state.gameBoard.lastDiscDropCell.discColor);\r\n\r\n  let moves = (player === state.players.playerOne.color)\r\n      ? players.playerOne.moves\r\n      : players.playerTwo.moves;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.player}>\r\n          <div className={styles.title}>Player</div>\r\n          <div className={[styles.chip, styles[player]].join(' ')}></div>\r\n        </div>\r\n        <div className={styles.moves}>Moves: {moves}</div>\r\n        { (isGameOver && player === lastPlayerColor)\r\n          && <div className={styles.winner}>WINNER!!!</div>}\r\n      </div>\r\n  );\r\n}\r\n\r\nPlayerDashboard.propTypes = {\r\n  player: PropTypes.string\r\n};\r\n\r\nexport default PlayerDashboard;\r\n","import PlayerDashboard from './PlayerDashboard';\r\n\r\nexport default PlayerDashboard;","import styles from './Game.module.css';\r\nimport GameBoard from '../GameBoard';\r\nimport CurrentPlayerDashboard from '../CurrentPlayerDashboard';\r\nimport PlayerDashboard from '../PlayerDashboard';\r\nimport store from '../../store/store';\r\n\r\nfunction Game(props) {\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <PlayerDashboard player={playerOne.color}/>\r\n        <div>\r\n          <CurrentPlayerDashboard/>\r\n          <GameBoard/>\r\n        </div>\r\n        <PlayerDashboard player={playerTwo.color}/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './Game';\r\n\r\nexport default Game;","import styles from './App.module.css';\nimport StartScreen from '../StartScreen/StartScreen';\nimport { useSelector } from 'react-redux';\nimport Game from '../Game';\n\nfunction App(props) {\n\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\n  const isStartScreenOn = useSelector(state => state.appNavigation.isStartScreenOn);\n\n  return (\n    <div className={styles['app-wrapper']}>\n      App: CONNECT FOUR (beta)\n      {isStartScreenOn && <StartScreen/>}\n      {isGameOn && <Game/>}\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayerDashboard_wrapper__3nRYp\",\"player\":\"PlayerDashboard_player__CpWVs\",\"moves\":\"PlayerDashboard_moves__1YVks\",\"title\":\"PlayerDashboard_title__2R2El\",\"chip\":\"PlayerDashboard_chip__3-EPz\",\"red\":\"PlayerDashboard_red__r7CtE\",\"yellow\":\"PlayerDashboard_yellow__gkkE5\",\"winner\":\"PlayerDashboard_winner__17AA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartScreen_wrapper__2GBHR\",\"button\":\"StartScreen_button__3fQxl\"};"],"sourceRoot":""}