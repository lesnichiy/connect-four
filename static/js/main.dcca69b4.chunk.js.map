{"version":3,"sources":["components/WinnerPopup/WinnerPopup.module.css","components/PlayerDashboard/PlayerDashboard.module.css","components/StartScreen/StartScreen.module.css","components/Game/Game.module.css","components/CurrentPlayerDashboard/CurrentPlayerDashboard.module.css","components/Header/Header.module.css","components/GameBoard/GameBoardCell/GameBoardCell.module.css","components/Settings/Settings.module.css","components/BestScores/BestScores.module.css","components/App/App.module.css","components/GameBoard/GameBoard.module.css","components/Timer/Timer.module.css","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.module.css","assets/img/logo.png","components/Header/index.js","components/Header/Header.js","components/StartScreen/StartScreen.js","store/actions/gameOnOff.js","store/reducers/gameBoard.js","store/reducers/appNavigation.js","store/reducers/players.js","store/reducers/winner.js","store/reducers/index.js","store/store.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","utils/appConstants.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","store/actions/countMovesRed.js","store/actions/countMovesYellow.js","store/actions/gameOver.js","utils/checkWinner.js","store/actions/currentColCursorOver.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/CurrentPlayerDashboard/CurrentPlayerDashboard.js","components/CurrentPlayerDashboard/index.js","components/PlayerDashboard/PlayerDashboard.js","components/PlayerDashboard/index.js","utils/addZero.js","components/Timer/Timer.js","components/Timer/index.js","store/actions/stopTimer.js","components/WinnerPopup/index.js","components/WinnerPopup/WinnerPopup.js","utils/saveResultInBestScores.js","store/actions/closeWinnerPopup.js","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.js","components/ReturnToStartScreenBtn/index.js","store/actions/returnToStartScreen.js","components/Game/Game.js","components/Game/index.js","store/actions/saveWinner.js","components/Settings/Settings.js","components/Settings/index.js","components/BestScores/BestScores.js","components/BestScores/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["module","exports","Header","className","styles","wrapper","src","logo","alt","width","height","title","StartScreen","isGameOn","useSelector","state","appNavigation","dispatch","useDispatch","links","button","to","onClick","type","payload","gameOnOffAction","startGame","initialState","lastDiscDropCell","discColor","col","row","currentColCursorOver","currentPlayer","board","isGameOver","playerOne","color","moves","playerTwo","isWin","time","combineReducers","gameBoard","action","player","newBoard","slice","push","length","colNum","players","winner","store","createStore","reducer","GameBoardCell","props","rowNum","getState","currentCellColor","cellColorClass","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","countMovesRedAction","countMovesRed","countMovesYellowAction","countMovesYellow","gameOverAction","gameOver","currentBoardArray","isWinner","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","console","log","checkWinner","onMouseOver","currentColCursorOverAction","changeCurrentColNum","cell","join","GameBoard","cells","GAME_FIELD_ROWS_NUM","CurrentPlayerDashboard","currentCol","chipWrapper","style","left","chip","PlayerDashboard","lastPlayerColor","addZero","num","parseInt","Timer","useState","setTime","useEffect","timerID","setInterval","clearInterval","stopTimerAction","min","Math","floor","sec","WinnerPopup","timeStr","currentBestScoresList","JSON","parse","localStorage","getItem","bestScoresNewItem","sort","prevItem","nextItem","splice","setItem","stringify","saveResultInBestScores","popupWrapper","popupWindow","close","e","preventDefault","wins","offerToRequest","popupOverlay","ReturnToStartScreenBtn","Game","saveWinnerAction","navWrapper","gameWrapper","timeWrapper","Settings","BestScores","App","appWrapper","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcca69b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"popupWrapper\":\"WinnerPopup_popupWrapper__11iZS\",\"popupWindow\":\"WinnerPopup_popupWindow__28C_M\",\"popupOverlay\":\"WinnerPopup_popupOverlay__3MF6u\",\"player\":\"WinnerPopup_player__2U8VQ\",\"title\":\"WinnerPopup_title__3wesi\",\"wins\":\"WinnerPopup_wins__3X1Mm\",\"moves\":\"WinnerPopup_moves__18C-G\",\"time\":\"WinnerPopup_time__2rWRX\",\"chip\":\"WinnerPopup_chip__3tAkE\",\"red\":\"WinnerPopup_red__1cbwL\",\"yellow\":\"WinnerPopup_yellow__3YjvX\",\"offerToRequest\":\"WinnerPopup_offerToRequest__3w7yp\",\"close\":\"WinnerPopup_close__e7NOw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayerDashboard_wrapper__3nRYp\",\"player\":\"PlayerDashboard_player__CpWVs\",\"moves\":\"PlayerDashboard_moves__1YVks\",\"title\":\"PlayerDashboard_title__2R2El\",\"chip\":\"PlayerDashboard_chip__3-EPz\",\"red\":\"PlayerDashboard_red__r7CtE\",\"yellow\":\"PlayerDashboard_yellow__gkkE5\",\"winner\":\"PlayerDashboard_winner__17AA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartScreen_wrapper__2GBHR\",\"links\":\"StartScreen_links__3fUTn\",\"button\":\"StartScreen_button__3fQxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__AT8P3\",\"navWrapper\":\"Game_navWrapper__cwf8B\",\"gameWrapper\":\"Game_gameWrapper__3W7K6\",\"timeWrapper\":\"Game_timeWrapper__wTemH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CurrentPlayerDashboard_wrapper__D11zR\",\"chipWrapper\":\"CurrentPlayerDashboard_chipWrapper__Qp4mG\",\"chip\":\"CurrentPlayerDashboard_chip__3Mqty\",\"red\":\"CurrentPlayerDashboard_red__15Sgo\",\"yellow\":\"CurrentPlayerDashboard_yellow__OGj4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__2kdU7\",\"logo\":\"Header_logo__1pHsl\",\"title\":\"Header_title__3fVxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"cell\":\"GameBoardCell_cell__2Z2tO\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Settings_wrapper__2Vhbh\",\"navWrapper\":\"Settings_navWrapper__3w8kD\",\"title\":\"Settings_title__2_HNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BestScores_wrapper__elE_s\",\"navWrapper\":\"BestScores_navWrapper__2_Cw_\",\"title\":\"BestScores_title__31Z_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__14-7x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Timer_time__1MZ_W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ReturnToStartScreenBtn_button__2vgSA\"};","export default __webpack_public_path__ + \"static/media/logo.778bfb3f.png\";","import Header from './Header';\r\n\r\nexport default Header;","import logo from '../../assets/img/logo.png';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <img src={logo}\r\n             alt={'Connect Four logo'}\r\n             width={80}\r\n             height={80}\r\n             className={styles.logo}\r\n        />\r\n        <h1 className={styles.title}>Connect Four</h1>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import styles from './StartScreen.module.css';\r\nimport { gameOnOffAction } from '../../store/actions/gameOnOff';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../../components/Header';\r\n\r\nfunction StartScreen() {\r\n\r\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\r\n  const dispatch = useDispatch();\r\n  const startGame = (isGameOn) => dispatch(gameOnOffAction(isGameOn));\r\n\r\n  return (\r\n\r\n      <div className={styles.wrapper}>\r\n        <Header/>\r\n        <div className={styles.links}>\r\n          <Link className={styles.button} to={'/game'} onClick={() => startGame(isGameOn)}>Start Game</Link>\r\n          <Link className={styles.button} to={'/settings'}>Settings</Link>\r\n          <Link className={styles.button} to={'/bestscores'}>Best Scores</Link>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default StartScreen;","export const gameOnOffAction = (isGameOn) => {\r\n  return {\r\n    type: 'GAME_ON_OFF',\r\n    payload: {\r\n      isGameOn: isGameOn\r\n    }\r\n  };\r\n};","const initialState = {\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentColCursorOver: 0,\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    case 'CHANGE_CURRENT_COL_CURSOR_OVER': {\r\n      const { colNum } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentColCursorOver: colNum\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        lastDiscDropCell: {\r\n          discColor: '',\r\n          col: null,\r\n          row: null\r\n        },\r\n        currentColCursorOver: 0,\r\n        currentPlayer: 'red',\r\n        board: [\r\n          [], // col 0 - row 0 is bottom, row 5 is top\r\n          [], // col 1\r\n          [], // col 2\r\n          [], // col 3\r\n          [], // col 4\r\n          [], // col 5\r\n          [], // col 6\r\n        ]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","const initialState = {\r\n  isGameOn: false,\r\n  isGameOver: false\r\n};\r\n\r\nconst appNavigation = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'GAME_ON_OFF': {\r\n      const { isGameOn } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          isGameOn: !isGameOn\r\n      }\r\n    }\r\n    case 'GAME_OVER': {\r\n      const { isGameOver } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isGameOver: isGameOver\r\n      }\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        isGameOn: false,\r\n        isGameOver: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { appNavigation };","const initialState = {\r\n  playerOne: {\r\n    color: 'red',\r\n    moves: 0\r\n  },\r\n  playerTwo: {\r\n    color: 'yellow',\r\n    moves: 0\r\n  }\r\n};\r\n\r\nconst players = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COUNT_MOVES_RED': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerOne.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'COUNT_MOVES_YELLOW': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerTwo.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerTwo: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: 'red',\r\n          moves: 0\r\n        },\r\n        playerTwo: {\r\n          color: 'yellow',\r\n          moves: 0\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { players };","const initialState = {\r\n  isWin: false,\r\n  color: '',\r\n  moves: 0,\r\n  time: 0\r\n};\r\n\r\nconst winner = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'STOP_TIMER': {\r\n      const { time } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        time\r\n      };\r\n    }\r\n    case 'SAVE_WINNER': {\r\n      const { color, moves } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        color,\r\n        moves,\r\n        isWin: true\r\n      };\r\n    }\r\n    case 'CLOSE_WINNER_POPUP':\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        isWin: false,\r\n        color: '',\r\n        moves: 0,\r\n        time: 0\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { winner };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\nimport { appNavigation } from './appNavigation';\r\nimport { players } from './players';\r\nimport { winner } from './winner';\r\n\r\nexport default combineReducers({ gameBoard, appNavigation, players, winner });","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\n//store.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport { countMovesRedAction } from '../../../store/actions/countMovesRed';\r\nimport { countMovesYellowAction } from '../../../store/actions/countMovesYellow';\r\nimport { currentColCursorOverAction } from '../../../store/actions/currentColCursorOver';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\nimport { gameOverAction } from '../../../store/actions/gameOver';\r\nimport { GAME_FIELD_ROWS_NUM } from '../../../utils/appConstants';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = state.appNavigation.isGameOver;\r\n\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === playerOne.color) ? playerTwo.color : playerOne.color;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n  const countMovesRed = (player) => dispatch(countMovesRedAction(player));\r\n  const countMovesYellow = (player) => dispatch(countMovesYellowAction(player));\r\n  const gameOver = (isGameOver) => dispatch(gameOverAction(isGameOver));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  const handleClickByCell = () => {\r\n    if ( state.gameBoard.board[colNum].length < GAME_FIELD_ROWS_NUM) {\r\n      if (isGameOver) return; //lock Click if Game Over\r\n      changePlayer(currentPlayer);\r\n      dropDiscToColumn(colNum, currentPlayer);\r\n      if (currentPlayer === playerOne.color) countMovesRed(currentPlayer);\r\n      if (currentPlayer === playerTwo.color) countMovesYellow(currentPlayer);\r\n      gameOver(checkWinner());\r\n    }\r\n  };\r\n\r\n  const changeCurrentColNum = (colNum) => dispatch(currentColCursorOverAction(colNum));\r\n\r\n  const handleMouseOver = () => {\r\n    if (isGameOver) return; //lock movement of Current Chip if Game Over\r\n    changeCurrentColNum(colNum);\r\n  };\r\n\r\n  return (\r\n      <div\r\n          className={styles.wrapper}\r\n          onClick={handleClickByCell}\r\n          onMouseOver={handleMouseOver}\r\n      >\r\n        <div className={[styles.cell, styles[cellColorClass]].join(' ')}>\r\n          {/*row: {rowNum}, col: {colNum}*/}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const GAME_FIELD_COLUMNS_NUM = 7;\r\nexport const GAME_FIELD_ROWS_NUM = 6;\r\nexport const GAME_FIELD_WIDTH_OF_CELL_PX = 50; //Width of game Cell in px\r\nexport const WINNER_COMBINATION_LENGTH = 4;\r\nexport const BEST_SCORES_LIST_LENGTH = 10;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","export const countMovesRedAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_RED',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const countMovesYellowAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_YELLOW',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const gameOverAction = (isGameOver) => {\r\n  return {\r\n    type: 'GAME_OVER',\r\n    payload: {\r\n      isGameOver: isGameOver\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\nimport { GAME_FIELD_COLUMNS_NUM, GAME_FIELD_ROWS_NUM, WINNER_COMBINATION_LENGTH } from './appConstants';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  let isWinner = false;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i < GAME_FIELD_COLUMNS_NUM; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i < GAME_FIELD_ROWS_NUM; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i < GAME_FIELD_COLUMNS_NUM && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j < GAME_FIELD_ROWS_NUM); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i < GAME_FIELD_COLUMNS_NUM && j < GAME_FIELD_ROWS_NUM); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n    isWinner = true;\r\n  }\r\n\r\n  return isWinner;\r\n};","export const currentColCursorOverAction = (colNum) => {\r\n  return {\r\n    type: 'CHANGE_CURRENT_COL_CURSOR_OVER',\r\n    payload: {\r\n      colNum\r\n    }\r\n  };\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\nimport { GAME_FIELD_COLUMNS_NUM, GAME_FIELD_ROWS_NUM } from '../../utils/appConstants';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = GAME_FIELD_ROWS_NUM - 1; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j < GAME_FIELD_COLUMNS_NUM; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import { useSelector } from 'react-redux';\r\nimport styles from './CurrentPlayerDashboard.module.css';\r\nimport { GAME_FIELD_WIDTH_OF_CELL_PX } from '../../utils/appConstants';\r\n\r\nfunction CurrentPlayerDashboard() {\r\n  const currentPlayer = useSelector(state => state.gameBoard.currentPlayer);\r\n\r\n  const currentCol = useSelector(state => state.gameBoard.currentColCursorOver);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        {/*Current Player:*/}\r\n        <div className={styles.chipWrapper}\r\n             style={{\r\n               left: currentCol * GAME_FIELD_WIDTH_OF_CELL_PX //shift on 50px - width of cell\r\n             }}>\r\n          <div className={[styles.chip, styles[currentPlayer]].join(' ')}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CurrentPlayerDashboard;","import CurrentPlayerDashboard from './CurrentPlayerDashboard';\r\n\r\nexport default CurrentPlayerDashboard;","import styles from './PlayerDashboard.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport store from '../../store/store'\r\n\r\nfunction PlayerDashboard(props) {\r\n  const player = props.player;\r\n\r\n  const state = store.getState();\r\n\r\n  const lastPlayerColor = useSelector(state => state.gameBoard.lastDiscDropCell.discColor);\r\n  const { isGameOver } = state.appNavigation;\r\n  const { players } = state;\r\n\r\n  let moves = (player === state.players.playerOne.color)\r\n      ? players.playerOne.moves\r\n      : players.playerTwo.moves;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.player}>\r\n          <div className={styles.title}>Player</div>\r\n          <div className={[styles.chip, styles[player]].join(' ')}></div>\r\n        </div>\r\n        <div className={styles.moves}>Moves: {moves}</div>\r\n        { (isGameOver && player === lastPlayerColor)\r\n          && <div className={styles.winner}>WINNER!!!</div>}\r\n      </div>\r\n  );\r\n}\r\n\r\nPlayerDashboard.propTypes = {\r\n  player: PropTypes.string\r\n};\r\n\r\nexport default PlayerDashboard;\r\n","import PlayerDashboard from './PlayerDashboard';\r\n\r\nexport default PlayerDashboard;","export const addZero = (num) => {\r\n  return ((parseInt(num, 10) < 10) ? '0' : '') + num;\r\n};","import React from 'react';\r\nimport styles from './Timer.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport store from '../../store/store';\r\nimport { stopTimerAction } from '../../store/actions/stopTimer';\r\nimport { addZero } from '../../utils/addZero';\r\n\r\nfunction Timer() {\r\n\r\n  const state = store.getState();\r\n  const { isGameOver } = state.appNavigation;\r\n  const dispatch = useDispatch();\r\n\r\n  const [ time, setTime ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isGameOver) return;\r\n    const timerID = setInterval(\r\n        () => setTime(time + 1),\r\n        1000\r\n    );\r\n    return () => clearInterval(timerID);\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(stopTimerAction(time));\r\n  }, [isGameOver]);\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  return (\r\n      <div className={styles.time}>Time: {addZero(min)}:{addZero(sec)}</div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import Timer from './Timer';\r\n\r\nexport default Timer;","export const stopTimerAction = (time) => {\r\n  return {\r\n    type: 'STOP_TIMER',\r\n    payload: {\r\n      time\r\n    }\r\n  }\r\n};","import WinnerPopup from './WinnerPopup';\r\n\r\nexport default WinnerPopup;","import styles from './WinnerPopup.module.css';\r\nimport store from '../../store/store';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeWinnerPopupAction } from '../../store/actions/closeWinnerPopup';\r\nimport { addZero } from '../../utils/addZero';\r\nimport { saveResultInBestScores } from '../../utils/saveResultInBestScores';\r\n\r\nconst WinnerPopup = () => {\r\n  const state = store.getState();\r\n  const { color, moves, time } = state.winner;\r\n\r\n  const dispatch = useDispatch();\r\n  const closePopup = () => dispatch(closeWinnerPopupAction());\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  const timeStr = `${addZero(min)}:${addZero(sec)}`;\r\n\r\n\r\n  //set value in BestScores\r\n  useEffect(() => {\r\n    saveResultInBestScores(color, moves, time);\r\n  }, []);\r\n\r\n  return (\r\n      <div className={styles.popupWrapper}>\r\n        <div className={styles.popupWindow}>\r\n          <button\r\n              className={styles.close}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                closePopup();\r\n              }}></button>\r\n          <div className={styles.player}>\r\n            <div className={styles.title}>Player</div>\r\n            <div className={[styles.chip, styles[color]].join(' ')}></div>\r\n            <div className={styles.wins}>WINS!</div>\r\n          </div>\r\n          <div className={styles.moves}>Moves: {moves}</div>\r\n          <div className={styles.time}>Time: {timeStr}</div>\r\n          <div className={styles.offerToRequest}>You won in {moves} moves. Want to know an interesting fact about this number?</div>\r\n        </div>\r\n        <div className={styles.popupOverlay}></div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default WinnerPopup;","import { BEST_SCORES_LIST_LENGTH } from './appConstants';\r\n\r\nexport const saveResultInBestScores = (player, moves, time) => {\r\n\r\n  const currentBestScoresList = JSON.parse(localStorage.getItem('bestScoresList')) || [];\r\n\r\n  const bestScoresNewItem = {\r\n    color: player,\r\n    moves,\r\n    time\r\n  };\r\n\r\n  currentBestScoresList.push(bestScoresNewItem);\r\n  currentBestScoresList.sort((prevItem, nextItem) => (prevItem.moves - nextItem.moves) || (prevItem.time - nextItem.time));\r\n  currentBestScoresList.splice(BEST_SCORES_LIST_LENGTH);\r\n\r\n  localStorage.setItem('bestScoresList', JSON.stringify(currentBestScoresList));\r\n};","export const closeWinnerPopupAction = () => {\r\n  return {\r\n    type: 'CLOSE_WINNER_POPUP'\r\n  }\r\n};","import { useDispatch } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport styles from './ReturnToStartScreenBtn.module.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction ReturnToStartScreenBtn() {\r\n  const dispatch = useDispatch();\r\n\r\n  const returnToStartScreen = () => dispatch(returnToStartScreenAction());\r\n\r\n  return (\r\n      <Link to={'/'} className={styles.button} onClick={returnToStartScreen}>Back to menu</Link>\r\n  );\r\n}\r\n\r\nexport default ReturnToStartScreenBtn;","import ReturnToStartScreenBtn from './ReturnToStartScreenBtn';\r\n\r\nexport default ReturnToStartScreenBtn;","export const returnToStartScreenAction = () => {\r\n  return {\r\n    type: 'RETURN_TO_START_SCREEN'\r\n  }\r\n};","import styles from './Game.module.css';\r\nimport GameBoard from '../GameBoard';\r\nimport CurrentPlayerDashboard from '../CurrentPlayerDashboard';\r\nimport PlayerDashboard from '../PlayerDashboard';\r\nimport store from '../../store/store';\r\nimport Timer from '../Timer';\r\nimport WinnerPopup from '../../components/WinnerPopup';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport { saveWinnerAction } from '../../store/actions/saveWinner';\r\n\r\nfunction Game() {\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = useSelector(state => state.appNavigation.isGameOver);\r\n  const isWin = useSelector(state => state.winner.isWin);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //component will unmount - clear gameBoard state when go back by browser\r\n  useEffect(() => {\r\n    return () => dispatch(returnToStartScreenAction());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const color = state.gameBoard.lastDiscDropCell.discColor;\r\n    const moves = (color === playerOne.color) ? state.players.playerOne.moves : state.players.playerTwo.moves;\r\n\r\n    if (isGameOver) dispatch(saveWinnerAction(color, moves));\r\n  }, [isGameOver]);\r\n\r\n  console.log(isGameOver);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div className={styles.gameWrapper}>\r\n          <PlayerDashboard player={playerOne.color}/>\r\n          <div>\r\n            <CurrentPlayerDashboard/>\r\n            <GameBoard/>\r\n          </div>\r\n          <PlayerDashboard player={playerTwo.color}/>\r\n        </div>\r\n        <div className={styles.timeWrapper}>\r\n          <Timer/>\r\n        </div>\r\n        {isWin && <WinnerPopup/>}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './Game';\r\n\r\nexport default Game;","export const saveWinnerAction = (color, moves) => {\r\n  return {\r\n    type: 'SAVE_WINNER',\r\n    payload: {\r\n      color,\r\n      moves\r\n    }\r\n  }\r\n};","import styles from './Settings.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\n\r\nfunction Settings() {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Settings</h2>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import Settings from './Settings';\r\n\r\nexport default Settings;","import styles from './BestScores.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\n\r\nfunction BestScores() {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Best Scores</h2>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default BestScores;","import BestScores from './BestScores';\r\n\r\nexport default BestScores;","import styles from './App.module.css';\nimport StartScreen from '../StartScreen/StartScreen';\nimport { Switch, Route } from 'react-router-dom';\nimport Game from '../Game';\nimport Settings from '../Settings';\nimport BestScores from '../BestScores';\n\nfunction App() {\n\n  return (\n    <div className={styles.appWrapper}>\n      <Switch>\n        <Route exact path={'/'} component={StartScreen} />\n        <Route path={'/game'} component={Game} />\n        <Route path={'/settings'} component={Settings} />\n        <Route path={'/bestscores'} component={BestScores} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}