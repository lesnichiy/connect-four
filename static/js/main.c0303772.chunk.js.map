{"version":3,"sources":["components/Settings/Settings.module.css","components/WinnerPopup/WinnerPopup.module.css","components/PlayerDashboard/PlayerDashboard.module.css","components/StartScreen/StartScreen.module.css","components/Game/Game.module.css","components/CurrentPlayerDashboard/CurrentPlayerDashboard.module.css","components/BestScores/BestScores.module.css","components/Header/Header.module.css","components/GameBoard/GameBoardCell/GameBoardCell.module.css","components/BestScores/ResultsTable/ResultsTable.module.css","components/BestScores/ResultsTable/ResultRow/ResultRow.module.css","components/App/App.module.css","components/GameBoard/GameBoard.module.css","components/Timer/Timer.module.css","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.module.css","assets/img/logo.png","components/Header/index.js","components/Header/Header.js","components/StartScreen/StartScreen.js","store/actions/gameOnOff.js","store/reducers/gameBoard.js","store/reducers/appNavigation.js","store/reducers/players.js","store/reducers/winner.js","store/reducers/settings.js","store/reducers/index.js","store/store.js","utils/appConstants.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","store/actions/countMovesRed.js","store/actions/countMovesYellow.js","store/actions/gameOver.js","utils/checkWinner.js","store/actions/currentColCursorOver.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/CurrentPlayerDashboard/CurrentPlayerDashboard.js","components/CurrentPlayerDashboard/index.js","components/PlayerDashboard/PlayerDashboard.js","components/PlayerDashboard/index.js","utils/addZero.js","components/Timer/Timer.js","components/Timer/index.js","store/actions/stopTimer.js","components/WinnerPopup/index.js","components/WinnerPopup/WinnerPopup.js","utils/saveResultInBestScores.js","store/actions/closeWinnerPopup.js","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.js","components/ReturnToStartScreenBtn/index.js","store/actions/returnToStartScreen.js","components/Game/Game.js","components/Game/index.js","store/actions/saveWinner.js","components/Settings/Settings.js","components/Settings/index.js","store/actions/saveSettings.js","components/BestScores/ResultsTable/ResultRow/index.js","components/BestScores/ResultsTable/ResultRow/ResultRow.js","components/BestScores/ResultsTable/index.js","components/BestScores/ResultsTable/ResultsTable.js","components/BestScores/index.js","components/BestScores/BestScores.js","utils/clearResultsInBestScores.js","components/App/App.js","components/App/index.js","index.js"],"names":["module","exports","Header","className","styles","wrapper","src","logo","alt","width","height","title","StartScreen","isGameOn","useSelector","state","appNavigation","dispatch","useDispatch","links","button","to","onClick","type","payload","gameOnOffAction","startGame","initialState","lastDiscDropCell","discColor","col","row","currentColCursorOver","currentPlayer","board","isGameOver","playerOne","color","moves","playerTwo","isWin","name","time","playerRedName","playerYellowName","combineReducers","gameBoard","action","player","newBoard","slice","push","length","colNum","players","winner","settings","store","createStore","reducer","subscribe","console","log","getState","BEST_SCORES_LIST_NAME","GameBoardCell","props","rowNum","currentCellColor","cellColorClass","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","countMovesRedAction","countMovesRed","countMovesYellowAction","countMovesYellow","gameOverAction","gameOver","currentBoardArray","isWinner","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","checkWinner","onMouseOver","currentColCursorOverAction","changeCurrentColNum","cell","join","GameBoard","cells","GAME_FIELD_ROWS_NUM","CurrentPlayerDashboard","currentCol","chipWrapper","style","left","chip","PlayerDashboard","lastPlayerColor","playerName","addZero","num","parseInt","Timer","useState","setTime","useEffect","timerID","setInterval","clearInterval","stopTimerAction","min","Math","floor","sec","WinnerPopup","timeStr","currentBestScoresList","JSON","parse","localStorage","getItem","bestScoresNewItem","sort","prevItem","nextItem","splice","setItem","stringify","saveResultInBestScores","popupWrapper","popupWindow","close","e","preventDefault","wins","offerToRequest","popupOverlay","ReturnToStartScreenBtn","Game","saveWinnerAction","navWrapper","gameWrapper","timeWrapper","Settings","redPlayerName","setRedPlayerName","yellowPlayerName","setYellowPlayerName","changePlayerName","target","id","value","contentWrapper","label","red","input","onChange","yellow","ResultRow","ResultsTable","resultsList","map","result","index","table","tableHeader","tableBody","colSpan","BestScores","isClearResults","setIsClearResults","removeItem","App","appWrapper","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0303772.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Settings_wrapper__2Vhbh\",\"navWrapper\":\"Settings_navWrapper__3w8kD\",\"title\":\"Settings_title__2_HNL\",\"contentWrapper\":\"Settings_contentWrapper__3d2bu\",\"label\":\"Settings_label__1hkWt\",\"input\":\"Settings_input__3sK2t\",\"button\":\"Settings_button__y4NAa\",\"chip\":\"Settings_chip__2k-6x\",\"red\":\"Settings_red__3iRTf\",\"yellow\":\"Settings_yellow__2Zvw7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popupWrapper\":\"WinnerPopup_popupWrapper__11iZS\",\"popupWindow\":\"WinnerPopup_popupWindow__28C_M\",\"popupOverlay\":\"WinnerPopup_popupOverlay__3MF6u\",\"player\":\"WinnerPopup_player__2U8VQ\",\"title\":\"WinnerPopup_title__3wesi\",\"wins\":\"WinnerPopup_wins__3X1Mm\",\"moves\":\"WinnerPopup_moves__18C-G\",\"time\":\"WinnerPopup_time__2rWRX\",\"chip\":\"WinnerPopup_chip__3tAkE\",\"red\":\"WinnerPopup_red__1cbwL\",\"yellow\":\"WinnerPopup_yellow__3YjvX\",\"offerToRequest\":\"WinnerPopup_offerToRequest__3w7yp\",\"close\":\"WinnerPopup_close__e7NOw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayerDashboard_wrapper__3nRYp\",\"player\":\"PlayerDashboard_player__CpWVs\",\"moves\":\"PlayerDashboard_moves__1YVks\",\"playerName\":\"PlayerDashboard_playerName__1kYBu\",\"title\":\"PlayerDashboard_title__2R2El\",\"chip\":\"PlayerDashboard_chip__3-EPz\",\"red\":\"PlayerDashboard_red__r7CtE\",\"yellow\":\"PlayerDashboard_yellow__gkkE5\",\"winner\":\"PlayerDashboard_winner__17AA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartScreen_wrapper__2GBHR\",\"links\":\"StartScreen_links__3fUTn\",\"button\":\"StartScreen_button__3fQxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__AT8P3\",\"navWrapper\":\"Game_navWrapper__cwf8B\",\"gameWrapper\":\"Game_gameWrapper__3W7K6\",\"timeWrapper\":\"Game_timeWrapper__wTemH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CurrentPlayerDashboard_wrapper__D11zR\",\"chipWrapper\":\"CurrentPlayerDashboard_chipWrapper__Qp4mG\",\"chip\":\"CurrentPlayerDashboard_chip__3Mqty\",\"red\":\"CurrentPlayerDashboard_red__15Sgo\",\"yellow\":\"CurrentPlayerDashboard_yellow__OGj4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BestScores_wrapper__elE_s\",\"navWrapper\":\"BestScores_navWrapper__2_Cw_\",\"title\":\"BestScores_title__31Z_h\",\"button\":\"BestScores_button__2kFXL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__2kdU7\",\"logo\":\"Header_logo__1pHsl\",\"title\":\"Header_title__3fVxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"cell\":\"GameBoardCell_cell__2Z2tO\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"ResultsTable_table__9pk69\",\"tableHeader\":\"ResultsTable_tableHeader__17b39\",\"tableBody\":\"ResultsTable_tableBody__2Wf4L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chip\":\"ResultRow_chip__bfoPR\",\"red\":\"ResultRow_red__a7lVO\",\"yellow\":\"ResultRow_yellow__3DbDy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__14-7x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Timer_time__1MZ_W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ReturnToStartScreenBtn_button__2vgSA\"};","export default __webpack_public_path__ + \"static/media/logo.778bfb3f.png\";","import Header from './Header';\r\n\r\nexport default Header;","import logo from '../../assets/img/logo.png';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <img src={logo}\r\n             alt={'Connect Four logo'}\r\n             width={80}\r\n             height={80}\r\n             className={styles.logo}\r\n        />\r\n        <h1 className={styles.title}>Connect Four</h1>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import styles from './StartScreen.module.css';\r\nimport { gameOnOffAction } from '../../store/actions/gameOnOff';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../../components/Header';\r\n\r\nfunction StartScreen() {\r\n\r\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\r\n  const dispatch = useDispatch();\r\n  const startGame = (isGameOn) => dispatch(gameOnOffAction(isGameOn));\r\n\r\n  return (\r\n\r\n      <div className={styles.wrapper}>\r\n        <Header/>\r\n        <div className={styles.links}>\r\n          <Link className={styles.button} to={'/game'} onClick={() => startGame(isGameOn)}>Start Game</Link>\r\n          <Link className={styles.button} to={'/settings'}>Settings</Link>\r\n          <Link className={styles.button} to={'/bestscores'}>Best Scores</Link>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default StartScreen;","export const gameOnOffAction = (isGameOn) => {\r\n  return {\r\n    type: 'GAME_ON_OFF',\r\n    payload: {\r\n      isGameOn: isGameOn\r\n    }\r\n  };\r\n};","const initialState = {\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentColCursorOver: 0,\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    case 'CHANGE_CURRENT_COL_CURSOR_OVER': {\r\n      const { colNum } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentColCursorOver: colNum\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        lastDiscDropCell: {\r\n          discColor: '',\r\n          col: null,\r\n          row: null\r\n        },\r\n        currentColCursorOver: 0,\r\n        currentPlayer: 'red',\r\n        board: [\r\n          [], // col 0 - row 0 is bottom, row 5 is top\r\n          [], // col 1\r\n          [], // col 2\r\n          [], // col 3\r\n          [], // col 4\r\n          [], // col 5\r\n          [], // col 6\r\n        ]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","const initialState = {\r\n  isGameOn: false,\r\n  isGameOver: false\r\n};\r\n\r\nconst appNavigation = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'GAME_ON_OFF': {\r\n      const { isGameOn } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          isGameOn: !isGameOn\r\n      }\r\n    }\r\n    case 'GAME_OVER': {\r\n      const { isGameOver } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isGameOver: isGameOver\r\n      }\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        isGameOn: false,\r\n        isGameOver: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { appNavigation };","const initialState = {\r\n  playerOne: {\r\n    color: 'red',\r\n    moves: 0\r\n  },\r\n  playerTwo: {\r\n    color: 'yellow',\r\n    moves: 0\r\n  }\r\n};\r\n\r\nconst players = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COUNT_MOVES_RED': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerOne.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'COUNT_MOVES_YELLOW': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerTwo.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerTwo: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        playerOne: {\r\n          color: 'red',\r\n          moves: 0\r\n        },\r\n        playerTwo: {\r\n          color: 'yellow',\r\n          moves: 0\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { players };","const initialState = {\r\n  isWin: false,\r\n  name: 'Incognito',\r\n  color: '',\r\n  moves: 0,\r\n  time: 0\r\n};\r\n\r\nconst winner = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'STOP_TIMER': {\r\n      const { time } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        time\r\n      };\r\n    }\r\n    case 'SAVE_WINNER': {\r\n      const { name, color, moves } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        name,\r\n        color,\r\n        moves,\r\n        isWin: true\r\n      };\r\n    }\r\n    case 'CLOSE_WINNER_POPUP':\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        isWin: false,\r\n        name: 'Incognito',\r\n        color: '',\r\n        moves: 0,\r\n        time: 0\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { winner };","const initialState = {\r\n  playerRedName: 'Red',\r\n  playerYellowName: 'Yellow'\r\n};\r\n\r\nconst settings = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SAVE_SETTINGS': {\r\n      const { playerRedName, playerYellowName } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n        playerRedName,\r\n        playerYellowName\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { settings };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\nimport { appNavigation } from './appNavigation';\r\nimport { players } from './players';\r\nimport { winner } from './winner';\r\nimport { settings } from './settings';\r\n\r\nexport default combineReducers({ gameBoard, appNavigation, players, winner, settings });","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","export const GAME_FIELD_COLUMNS_NUM = 7;\r\nexport const GAME_FIELD_ROWS_NUM = 6;\r\nexport const GAME_FIELD_WIDTH_OF_CELL_PX = 50; //Width of game Cell in px\r\nexport const WINNER_COMBINATION_LENGTH = 4;\r\nexport const BEST_SCORES_LIST_LENGTH = 10;\r\nexport const BEST_SCORES_LIST_NAME = 'bestScoresList';","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport { countMovesRedAction } from '../../../store/actions/countMovesRed';\r\nimport { countMovesYellowAction } from '../../../store/actions/countMovesYellow';\r\nimport { currentColCursorOverAction } from '../../../store/actions/currentColCursorOver';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\nimport { gameOverAction } from '../../../store/actions/gameOver';\r\nimport { GAME_FIELD_ROWS_NUM } from '../../../utils/appConstants';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = state.appNavigation.isGameOver;\r\n\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === playerOne.color) ? playerTwo.color : playerOne.color;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n  const countMovesRed = (player) => dispatch(countMovesRedAction(player));\r\n  const countMovesYellow = (player) => dispatch(countMovesYellowAction(player));\r\n  const gameOver = (isGameOver) => dispatch(gameOverAction(isGameOver));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  const handleClickByCell = () => {\r\n    if ( state.gameBoard.board[colNum].length < GAME_FIELD_ROWS_NUM) {\r\n      if (isGameOver) return; //lock Click if Game Over\r\n      changePlayer(currentPlayer);\r\n      dropDiscToColumn(colNum, currentPlayer);\r\n      if (currentPlayer === playerOne.color) countMovesRed(currentPlayer);\r\n      if (currentPlayer === playerTwo.color) countMovesYellow(currentPlayer);\r\n      gameOver(checkWinner());\r\n    }\r\n  };\r\n\r\n  const changeCurrentColNum = (colNum) => dispatch(currentColCursorOverAction(colNum));\r\n\r\n  const handleMouseOver = () => {\r\n    if (isGameOver) return; //lock movement of Current Chip if Game Over\r\n    changeCurrentColNum(colNum);\r\n  };\r\n\r\n  return (\r\n      <div\r\n          className={styles.wrapper}\r\n          onClick={handleClickByCell}\r\n          onMouseOver={handleMouseOver}\r\n      >\r\n        <div className={[styles.cell, styles[cellColorClass]].join(' ')}>\r\n          {/*row: {rowNum}, col: {colNum}*/}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","export const countMovesRedAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_RED',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const countMovesYellowAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_YELLOW',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const gameOverAction = (isGameOver) => {\r\n  return {\r\n    type: 'GAME_OVER',\r\n    payload: {\r\n      isGameOver: isGameOver\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\nimport { GAME_FIELD_COLUMNS_NUM, GAME_FIELD_ROWS_NUM, WINNER_COMBINATION_LENGTH } from './appConstants';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  let isWinner = false;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i < GAME_FIELD_COLUMNS_NUM; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i < GAME_FIELD_ROWS_NUM; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i < GAME_FIELD_COLUMNS_NUM && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j < GAME_FIELD_ROWS_NUM); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i < GAME_FIELD_COLUMNS_NUM && j < GAME_FIELD_ROWS_NUM); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n    isWinner = true;\r\n  }\r\n\r\n  return isWinner;\r\n};","export const currentColCursorOverAction = (colNum) => {\r\n  return {\r\n    type: 'CHANGE_CURRENT_COL_CURSOR_OVER',\r\n    payload: {\r\n      colNum\r\n    }\r\n  };\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\nimport { GAME_FIELD_COLUMNS_NUM, GAME_FIELD_ROWS_NUM } from '../../utils/appConstants';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = GAME_FIELD_ROWS_NUM - 1; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j < GAME_FIELD_COLUMNS_NUM; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import { useSelector } from 'react-redux';\r\nimport styles from './CurrentPlayerDashboard.module.css';\r\nimport { GAME_FIELD_WIDTH_OF_CELL_PX } from '../../utils/appConstants';\r\n\r\nfunction CurrentPlayerDashboard() {\r\n  const currentPlayer = useSelector(state => state.gameBoard.currentPlayer);\r\n\r\n  const currentCol = useSelector(state => state.gameBoard.currentColCursorOver);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        {/*Current Player:*/}\r\n        <div className={styles.chipWrapper}\r\n             style={{\r\n               left: currentCol * GAME_FIELD_WIDTH_OF_CELL_PX //shift on 50px - width of cell\r\n             }}>\r\n          <div className={[styles.chip, styles[currentPlayer]].join(' ')}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CurrentPlayerDashboard;","import CurrentPlayerDashboard from './CurrentPlayerDashboard';\r\n\r\nexport default CurrentPlayerDashboard;","import styles from './PlayerDashboard.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport store from '../../store/store'\r\n\r\nfunction PlayerDashboard(props) {\r\n  const player = props.player;\r\n\r\n  const state = store.getState();\r\n\r\n  const lastPlayerColor = useSelector(state => state.gameBoard.lastDiscDropCell.discColor);\r\n  const { isGameOver } = state.appNavigation;\r\n  const { players } = state;\r\n  const { settings } = state;\r\n\r\n  const playerName = (player === state.players.playerOne.color)\r\n      ? settings.playerRedName\r\n      : settings.playerYellowName;\r\n\r\n  let moves = (player === state.players.playerOne.color)\r\n      ? players.playerOne.moves\r\n      : players.playerTwo.moves;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.player}>\r\n          <div className={styles.title}>Player</div>\r\n          <div className={[styles.chip, styles[player]].join(' ')}></div>\r\n        </div>\r\n        <div className={styles.playerName}>Name: {playerName}</div>\r\n        <div className={styles.moves}>Moves: {moves}</div>\r\n        { (isGameOver && player === lastPlayerColor)\r\n          && <div className={styles.winner}>WINNER!!!</div>}\r\n      </div>\r\n  );\r\n}\r\n\r\nPlayerDashboard.propTypes = {\r\n  player: PropTypes.string\r\n};\r\n\r\nexport default PlayerDashboard;\r\n","import PlayerDashboard from './PlayerDashboard';\r\n\r\nexport default PlayerDashboard;","export const addZero = (num) => {\r\n  return ((parseInt(num, 10) < 10) ? '0' : '') + num;\r\n};","import React from 'react';\r\nimport styles from './Timer.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport store from '../../store/store';\r\nimport { stopTimerAction } from '../../store/actions/stopTimer';\r\nimport { addZero } from '../../utils/addZero';\r\n\r\nfunction Timer() {\r\n\r\n  const state = store.getState();\r\n  const { isGameOver } = state.appNavigation;\r\n  const dispatch = useDispatch();\r\n\r\n  const [ time, setTime ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isGameOver) return;\r\n    const timerID = setInterval(\r\n        () => setTime(time + 1),\r\n        1000\r\n    );\r\n    return () => clearInterval(timerID);\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(stopTimerAction(time));\r\n  }, [isGameOver]);\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  return (\r\n      <div className={styles.time}>Time: {addZero(min)}:{addZero(sec)}</div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import Timer from './Timer';\r\n\r\nexport default Timer;","export const stopTimerAction = (time) => {\r\n  return {\r\n    type: 'STOP_TIMER',\r\n    payload: {\r\n      time\r\n    }\r\n  }\r\n};","import WinnerPopup from './WinnerPopup';\r\n\r\nexport default WinnerPopup;","import styles from './WinnerPopup.module.css';\r\nimport store from '../../store/store';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeWinnerPopupAction } from '../../store/actions/closeWinnerPopup';\r\nimport { addZero } from '../../utils/addZero';\r\nimport { saveResultInBestScores } from '../../utils/saveResultInBestScores';\r\n\r\nconst WinnerPopup = () => {\r\n  const state = store.getState();\r\n  const { name, color, moves, time } = state.winner;\r\n\r\n  const dispatch = useDispatch();\r\n  const closePopup = () => dispatch(closeWinnerPopupAction());\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  const timeStr = `${addZero(min)}:${addZero(sec)}`;\r\n\r\n\r\n  //set value in BestScores\r\n  useEffect(() => {\r\n    saveResultInBestScores(name, color, moves, time);\r\n  }, []);\r\n\r\n  return (\r\n      <div className={styles.popupWrapper}>\r\n        <div className={styles.popupWindow}>\r\n          <button\r\n              className={styles.close}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                closePopup();\r\n              }}></button>\r\n          <div className={styles.player}>\r\n            <div className={styles.title}>{name}</div>\r\n            <div className={[styles.chip, styles[color]].join(' ')}></div>\r\n            <div className={styles.wins}>WINS!</div>\r\n          </div>\r\n          <div className={styles.moves}>Moves: {moves}</div>\r\n          <div className={styles.time}>Time: {timeStr}</div>\r\n          <div className={styles.offerToRequest}>You won in {moves} moves. Want to know an interesting fact about this number?</div>\r\n        </div>\r\n        <div className={styles.popupOverlay}></div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default WinnerPopup;","import { BEST_SCORES_LIST_NAME, BEST_SCORES_LIST_LENGTH } from './appConstants';\r\n\r\nexport const saveResultInBestScores = (name, color, moves, time) => {\r\n\r\n  const currentBestScoresList = JSON.parse(localStorage.getItem(BEST_SCORES_LIST_NAME)) || [];\r\n\r\n  const bestScoresNewItem = {\r\n    name,\r\n    color,\r\n    moves,\r\n    time\r\n  };\r\n\r\n  currentBestScoresList.push(bestScoresNewItem);\r\n  currentBestScoresList.sort((prevItem, nextItem) => (prevItem.moves - nextItem.moves) || (prevItem.time - nextItem.time));\r\n  currentBestScoresList.splice(BEST_SCORES_LIST_LENGTH);\r\n\r\n  localStorage.setItem(BEST_SCORES_LIST_NAME, JSON.stringify(currentBestScoresList));\r\n};","export const closeWinnerPopupAction = () => {\r\n  return {\r\n    type: 'CLOSE_WINNER_POPUP'\r\n  }\r\n};","import { useDispatch } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport styles from './ReturnToStartScreenBtn.module.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction ReturnToStartScreenBtn() {\r\n  const dispatch = useDispatch();\r\n\r\n  const returnToStartScreen = () => dispatch(returnToStartScreenAction());\r\n\r\n  return (\r\n      <Link to={'/'} className={styles.button} onClick={returnToStartScreen}>Back to menu</Link>\r\n  );\r\n}\r\n\r\nexport default ReturnToStartScreenBtn;","import ReturnToStartScreenBtn from './ReturnToStartScreenBtn';\r\n\r\nexport default ReturnToStartScreenBtn;","export const returnToStartScreenAction = () => {\r\n  return {\r\n    type: 'RETURN_TO_START_SCREEN'\r\n  }\r\n};","import styles from './Game.module.css';\r\nimport GameBoard from '../GameBoard';\r\nimport CurrentPlayerDashboard from '../CurrentPlayerDashboard';\r\nimport PlayerDashboard from '../PlayerDashboard';\r\nimport store from '../../store/store';\r\nimport Timer from '../Timer';\r\nimport WinnerPopup from '../../components/WinnerPopup';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport { saveWinnerAction } from '../../store/actions/saveWinner';\r\n\r\nfunction Game() {\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const { settings } = state;\r\n  const isGameOver = useSelector(state => state.appNavigation.isGameOver);\r\n  const isWin = useSelector(state => state.winner.isWin);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //component will unmount - clear gameBoard state when go back by browser\r\n  useEffect(() => {\r\n    return () => dispatch(returnToStartScreenAction());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const color = state.gameBoard.lastDiscDropCell.discColor;\r\n    const moves = (color === playerOne.color) ? playerOne.moves : playerTwo.moves;\r\n    const name = (color === playerOne.color) ? settings.playerRedName : settings.playerYellowName;\r\n    if (isGameOver) dispatch(saveWinnerAction(name, color, moves));\r\n  }, [isGameOver]);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div className={styles.gameWrapper}>\r\n          <PlayerDashboard player={playerOne.color}/>\r\n          <div>\r\n            <CurrentPlayerDashboard/>\r\n            <GameBoard/>\r\n          </div>\r\n          <PlayerDashboard player={playerTwo.color}/>\r\n        </div>\r\n        <div className={styles.timeWrapper}>\r\n          <Timer/>\r\n        </div>\r\n        {isWin && <WinnerPopup/>}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './Game';\r\n\r\nexport default Game;","export const saveWinnerAction = (name, color, moves) => {\r\n  return {\r\n    type: 'SAVE_WINNER',\r\n    payload: {\r\n      name,\r\n      color,\r\n      moves\r\n    }\r\n  }\r\n};","import styles from './Settings.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { saveSettingsAction } from '../../store/actions/saveSettings';\r\nimport store from '../../store/store'\r\n\r\nfunction Settings() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = store.getState();\r\n  const { settings } = state;\r\n\r\n  const [ redPlayerName, setRedPlayerName] = useState(settings.playerRedName);\r\n  const [ yellowPlayerName, setYellowPlayerName] = useState(settings.playerYellowName);\r\n\r\n  const changePlayerName = (e) => {\r\n    if (e.target.id === 'red') setRedPlayerName(e.target.value);\r\n    if (e.target.id === 'yellow') setYellowPlayerName(e.target.value);\r\n  };\r\n\r\n  const saveSettings = () => dispatch(saveSettingsAction(redPlayerName, yellowPlayerName));\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div className={styles.contentWrapper}>\r\n          <h2 className={styles.title}>Settings</h2>\r\n          <div>\r\n            <div>\r\n              <label className={styles.label}>\r\n                <span>Player</span>\r\n                <div className={[styles.chip, styles.red].join(' ')}></div>\r\n                <span>name:</span>\r\n                <input id={'red'}\r\n                       type={'text'}\r\n                       value={redPlayerName}\r\n                       className={styles.input}\r\n                       onChange={changePlayerName}/></label>\r\n            </div>\r\n            <div>\r\n              <label className={styles.label}>\r\n                <span>Player</span>\r\n                <div className={[styles.chip, styles.yellow].join(' ')}></div>\r\n                <span>name:</span>\r\n                <input id={'yellow'}\r\n                       type={'text'}\r\n                       className={styles.input}\r\n                       value={yellowPlayerName}\r\n                       onChange={changePlayerName}/>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <button className={styles.button} onClick={saveSettings}>Save settings</button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import Settings from './Settings';\r\n\r\nexport default Settings;","export const saveSettingsAction = (playerRedName, playerYellowName) => {\r\n  return {\r\n    type: 'SAVE_SETTINGS',\r\n    payload: {\r\n      playerRedName,\r\n      playerYellowName\r\n    }\r\n  };\r\n};","import ResultRow from './ResultRow';\r\n\r\nexport default ResultRow;","import styles from './ResultRow.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { addZero } from '../../../../utils/addZero';\r\n\r\nconst ResultRow = (props) => {\r\n  const { name, color, moves, time } = props;\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n  const timeStr = `${addZero(min)}:${addZero(sec)}`;\r\n\r\n\r\n  return (\r\n      <tr>\r\n        <td>{name}</td>\r\n        <td><div className={[styles.chip, styles[color]].join(' ')}></div></td>\r\n        <td>{moves}</td>\r\n        <td>{timeStr}</td>\r\n      </tr>\r\n  );\r\n};\r\n\r\nResultRow.propTypes = {\r\n  name: PropTypes.string,\r\n  color: PropTypes.string,\r\n  moves: PropTypes.number,\r\n  time: PropTypes.number\r\n};\r\n\r\nexport default ResultRow;","import ResultsTable from './ResultsTable';\r\n\r\nexport default ResultsTable;","import styles from './ResultsTable.module.css';\r\nimport {BEST_SCORES_LIST_NAME} from '../../../utils/appConstants';\r\nimport ResultRow from './ResultRow';\r\n\r\nconst ResultsTable = () => {\r\n  const currentBestScoresList = JSON.parse(localStorage.getItem(BEST_SCORES_LIST_NAME)) || null;\r\n  let resultsList = null;\r\n\r\n  if (currentBestScoresList) {\r\n    resultsList = currentBestScoresList.map( (result, index) => {\r\n      return <ResultRow key={index}\r\n                        name={result.name}\r\n                        color={result.color}\r\n                        moves={result.moves}\r\n                        time={result.time}/>;\r\n    });\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <table className={styles.table}>\r\n          <thead>\r\n          <tr className={styles.tableHeader}>\r\n            <th>Name</th>\r\n            <th>Color</th>\r\n            <th>Moves</th>\r\n            <th>Time</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody className={styles.tableBody}>\r\n            {resultsList || <tr><td colSpan={4}>Best results list is empty</td></tr>}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ResultsTable;","import BestScores from './BestScores';\r\n\r\nexport default BestScores;","import styles from './BestScores.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn';\r\nimport ResultTable from './ResultsTable';\r\nimport { clearResultsInBestScores } from '../../utils/clearResultsInBestScores';\r\nimport { useState } from 'react';\r\n\r\nconst BestScores = () => {\r\n\r\n  const [ isClearResults, setIsClearResults] = useState(false);\r\n\r\n  const clearResults = () => {\r\n    setIsClearResults(!isClearResults);\r\n    clearResultsInBestScores();\r\n  };\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Best Scores</h2>\r\n          <ResultTable/>\r\n        </div>\r\n        <button className={styles.button} onClick={clearResults}>Clear table</button>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default BestScores;","import { BEST_SCORES_LIST_NAME } from './appConstants';\r\n\r\nexport const clearResultsInBestScores = () => localStorage.removeItem(BEST_SCORES_LIST_NAME);","import styles from './App.module.css';\nimport StartScreen from '../StartScreen/StartScreen';\nimport { Switch, Route } from 'react-router-dom';\nimport Game from '../Game';\nimport Settings from '../Settings';\nimport BestScores from '../BestScores';\n\nfunction App() {\n\n  return (\n    <div className={styles.appWrapper}>\n      <Switch>\n        <Route exact path={'/'} component={StartScreen} />\n        <Route path={'/game'} component={Game} />\n        <Route path={'/settings'} component={Settings} />\n        <Route path={'/bestscores'} component={BestScores} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}