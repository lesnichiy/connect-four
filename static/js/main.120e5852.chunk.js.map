{"version":3,"sources":["components/PlayerDashboard/PlayerDashboard.module.css","components/StartScreen/StartScreen.module.css","components/Game/Game.module.css","components/CurrentPlayerDashboard/CurrentPlayerDashboard.module.css","components/GameBoard/GameBoardCell/GameBoardCell.module.css","components/WinnerPopup/WinnerPopup.module.css","components/Settings/Settings.module.css","components/BestScores/BestScores.module.css","components/App/App.module.css","components/GameBoard/GameBoard.module.css","components/Timer/Timer.module.css","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.module.css","components/StartScreen/StartScreen.js","store/actions/gameOnOff.js","store/reducers/gameBoard.js","store/reducers/appNavigation.js","store/reducers/players.js","store/reducers/winner.js","store/reducers/index.js","store/store.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","store/actions/countMovesRed.js","store/actions/countMovesYellow.js","store/actions/gameOver.js","utils/checkWinner.js","utils/appConstants.js","store/actions/currentColCursorOver.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/CurrentPlayerDashboard/CurrentPlayerDashboard.js","components/CurrentPlayerDashboard/index.js","components/PlayerDashboard/PlayerDashboard.js","components/PlayerDashboard/index.js","components/Timer/Timer.js","components/Timer/index.js","store/actions/stopTimer.js","components/WinnerPopup/index.js","components/WinnerPopup/WinnerPopup.js","components/ReturnToStartScreenBtn/ReturnToStartScreenBtn.js","components/ReturnToStartScreenBtn/index.js","store/actions/returnToStartScreen.js","components/Game/Game.js","components/Game/index.js","store/actions/saveWinner.js","components/Settings/Settings.js","components/Settings/index.js","components/BestScores/BestScores.js","components/BestScores/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["module","exports","StartScreen","isGameOn","useSelector","state","appNavigation","dispatch","useDispatch","className","styles","wrapper","button","to","onClick","type","payload","gameOnOffAction","startGame","initialState","lastDiscDropCell","discColor","col","row","currentColCursorOver","currentPlayer","board","isGameOver","playerOne","color","moves","playerTwo","isWin","time","combineReducers","gameBoard","action","player","newBoard","slice","push","length","colNum","players","winner","store","createStore","reducer","subscribe","console","log","getState","GameBoardCell","props","rowNum","currentCellColor","cellColorClass","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","countMovesRedAction","countMovesRed","countMovesYellowAction","countMovesYellow","gameOverAction","gameOver","currentBoardArray","isWinner","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","checkWinner","onMouseOver","currentColCursorOverAction","changeCurrentColNum","cell","join","GameBoard","cells","GAME_FIELD_ROWS_NUM","CurrentPlayerDashboard","currentCol","chipWrapper","style","left","chip","PlayerDashboard","lastPlayerColor","title","Timer","useState","setTime","useEffect","timerID","setInterval","clearInterval","stopTimerAction","min","Math","floor","sec","addZero","num","parseInt","WinnerPopup","popupWrapper","popupWindow","popupOverlay","ReturnToStartScreenBtn","Game","saveWinnerAction","navWrapper","gameWrapper","timeWrapper","Settings","BestScores","App","appWrapper","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.120e5852.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayerDashboard_wrapper__3nRYp\",\"player\":\"PlayerDashboard_player__CpWVs\",\"moves\":\"PlayerDashboard_moves__1YVks\",\"title\":\"PlayerDashboard_title__2R2El\",\"chip\":\"PlayerDashboard_chip__3-EPz\",\"red\":\"PlayerDashboard_red__r7CtE\",\"yellow\":\"PlayerDashboard_yellow__gkkE5\",\"winner\":\"PlayerDashboard_winner__17AA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartScreen_wrapper__2GBHR\",\"button\":\"StartScreen_button__3fQxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__AT8P3\",\"navWrapper\":\"Game_navWrapper__cwf8B\",\"gameWrapper\":\"Game_gameWrapper__3W7K6\",\"timeWrapper\":\"Game_timeWrapper__wTemH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CurrentPlayerDashboard_wrapper__D11zR\",\"chipWrapper\":\"CurrentPlayerDashboard_chipWrapper__Qp4mG\",\"chip\":\"CurrentPlayerDashboard_chip__3Mqty\",\"red\":\"CurrentPlayerDashboard_red__15Sgo\",\"yellow\":\"CurrentPlayerDashboard_yellow__OGj4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"cell\":\"GameBoardCell_cell__2Z2tO\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popupWrapper\":\"WinnerPopup_popupWrapper__11iZS\",\"popupWindow\":\"WinnerPopup_popupWindow__28C_M\",\"popupOverlay\":\"WinnerPopup_popupOverlay__3MF6u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Settings_wrapper__2Vhbh\",\"navWrapper\":\"Settings_navWrapper__3w8kD\",\"title\":\"Settings_title__2_HNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BestScores_wrapper__elE_s\",\"navWrapper\":\"BestScores_navWrapper__2_Cw_\",\"title\":\"BestScores_title__31Z_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__14-7x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Timer_time__1MZ_W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ReturnToStartScreenBtn_button__2vgSA\"};","import styles from './StartScreen.module.css';\r\nimport { gameOnOffAction } from '../../store/actions/gameOnOff';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction StartScreen() {\r\n\r\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\r\n  const dispatch = useDispatch();\r\n  const startGame = (isGameOn) => dispatch(gameOnOffAction(isGameOn));\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <Link className={styles.button} to={'/game'} onClick={() => startGame(isGameOn)}>Start Game</Link>\r\n        <Link className={styles.button} to={'/settings'}>Settings</Link>\r\n        <Link className={styles.button} to={'/bestscores'}>Best Scores</Link>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default StartScreen;","export const gameOnOffAction = (isGameOn) => {\r\n  return {\r\n    type: 'GAME_ON_OFF',\r\n    payload: {\r\n      isGameOn: isGameOn\r\n    }\r\n  };\r\n};","const initialState = {\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentColCursorOver: 0,\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    case 'CHANGE_CURRENT_COL_CURSOR_OVER': {\r\n      const { colNum } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentColCursorOver: colNum\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        lastDiscDropCell: {\r\n          discColor: '',\r\n          col: null,\r\n          row: null\r\n        },\r\n        currentColCursorOver: 0,\r\n        currentPlayer: 'red',\r\n        board: [\r\n          [], // col 0 - row 0 is bottom, row 5 is top\r\n          [], // col 1\r\n          [], // col 2\r\n          [], // col 3\r\n          [], // col 4\r\n          [], // col 5\r\n          [], // col 6\r\n        ]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","const initialState = {\r\n  isGameOn: false,\r\n  isGameOver: false\r\n};\r\n\r\nconst appNavigation = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'GAME_ON_OFF': {\r\n      const { isGameOn } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          isGameOn: !isGameOn\r\n      }\r\n    }\r\n    case 'GAME_OVER': {\r\n      const { isGameOver } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isGameOver: isGameOver\r\n      }\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        isGameOn: false,\r\n        isGameOver: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { appNavigation };","const initialState = {\r\n  playerOne: {\r\n    color: 'red',\r\n    moves: 0\r\n  },\r\n  playerTwo: {\r\n    color: 'yellow',\r\n    moves: 0\r\n  }\r\n};\r\n\r\nconst players = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COUNT_MOVES_RED': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerOne.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'COUNT_MOVES_YELLOW': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerTwo.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerTwo: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'RETURN_TO_START_SCREEN': {\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: 'red',\r\n          moves: 0\r\n        },\r\n        playerTwo: {\r\n          color: 'yellow',\r\n          moves: 0\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { players };","const initialState = {\r\n  isWin: false,\r\n  color: '',\r\n  moves: 0,\r\n  time: 0\r\n};\r\n\r\nconst winner = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'STOP_TIMER': {\r\n      const { time } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        time\r\n      };\r\n    }\r\n    case 'SAVE_WINNER': {\r\n      const { color, moves } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        color,\r\n        moves,\r\n        isWin: true\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { winner };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\nimport { appNavigation } from './appNavigation';\r\nimport { players } from './players';\r\nimport { winner } from './winner';\r\n\r\nexport default combineReducers({ gameBoard, appNavigation, players, winner });","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport { countMovesRedAction } from '../../../store/actions/countMovesRed';\r\nimport { countMovesYellowAction } from '../../../store/actions/countMovesYellow';\r\nimport { currentColCursorOverAction } from '../../../store/actions/currentColCursorOver';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\nimport { gameOverAction } from '../../../store/actions/gameOver';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = state.appNavigation.isGameOver;\r\n\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === playerOne.color) ? playerTwo.color : playerOne.color;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n  const countMovesRed = (player) => dispatch(countMovesRedAction(player));\r\n  const countMovesYellow = (player) => dispatch(countMovesYellowAction(player));\r\n  const gameOver = (isGameOver) => dispatch(gameOverAction(isGameOver));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  //define func by condition. Lock Click if Game Over\r\n  const handleClickByCell = () => {\r\n    if ( state.gameBoard.board[colNum].length < 6) {\r\n      if (isGameOver) return;\r\n      changePlayer(currentPlayer);\r\n      dropDiscToColumn(colNum, currentPlayer);\r\n      if (currentPlayer === playerOne.color) countMovesRed(currentPlayer);\r\n      if (currentPlayer === playerTwo.color) countMovesYellow(currentPlayer);\r\n      gameOver(checkWinner());\r\n    }\r\n  };\r\n\r\n  const changeCurrentColNum = (colNum) => dispatch(currentColCursorOverAction(colNum));\r\n\r\n  //define func by condition. Lock movement of Current Chip if Game Over\r\n  const handleMouseOver = () => {\r\n    if (isGameOver) return;\r\n    changeCurrentColNum(colNum);\r\n  };\r\n\r\n  return (\r\n      <div\r\n          className={styles.wrapper}\r\n          onClick={handleClickByCell}\r\n          onMouseOver={handleMouseOver}\r\n      >\r\n        <div className={[styles.cell, styles[cellColorClass]].join(' ')}>\r\n          {/*row: {rowNum}, col: {colNum}*/}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","export const countMovesRedAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_RED',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const countMovesYellowAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_YELLOW',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const gameOverAction = (isGameOver) => {\r\n  return {\r\n    type: 'GAME_OVER',\r\n    payload: {\r\n      isGameOver: isGameOver\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\nimport { GAME_FIELD_COLUMNS_NUM, GAME_FIELD_ROWS_NUM, WINNER_COMBINATION_LENGTH } from './appConstants';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  let isWinner = false;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i < GAME_FIELD_COLUMNS_NUM; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i < GAME_FIELD_ROWS_NUM; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i < GAME_FIELD_COLUMNS_NUM && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j < GAME_FIELD_ROWS_NUM); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i < GAME_FIELD_COLUMNS_NUM && j < GAME_FIELD_ROWS_NUM); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= WINNER_COMBINATION_LENGTH);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n    isWinner = true;\r\n  }\r\n\r\n  return isWinner;\r\n};","export const GAME_FIELD_COLUMNS_NUM = 7;\r\nexport const GAME_FIELD_ROWS_NUM = 6;\r\nexport const GAME_FIELD_WIDTH_OF_CELL_PX = 50; //Width of game Cell in px\r\nexport const WINNER_COMBINATION_LENGTH = 4;","export const currentColCursorOverAction = (colNum) => {\r\n  return {\r\n    type: 'CHANGE_CURRENT_COL_CURSOR_OVER',\r\n    payload: {\r\n      colNum\r\n    }\r\n  };\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\nimport { GAME_FIELD_COLUMNS_NUM, GAME_FIELD_ROWS_NUM } from '../../utils/appConstants';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = GAME_FIELD_ROWS_NUM - 1; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j < GAME_FIELD_COLUMNS_NUM; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import { useSelector } from 'react-redux';\r\nimport styles from './CurrentPlayerDashboard.module.css';\r\nimport { GAME_FIELD_WIDTH_OF_CELL_PX } from '../../utils/appConstants';\r\n\r\nfunction CurrentPlayerDashboard() {\r\n  const currentPlayer = useSelector(state => state.gameBoard.currentPlayer);\r\n\r\n  const currentCol = useSelector(state => state.gameBoard.currentColCursorOver);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        {/*Current Player:*/}\r\n        <div className={styles.chipWrapper}\r\n             style={{\r\n               left: currentCol * GAME_FIELD_WIDTH_OF_CELL_PX //shift on 50px - width of cell\r\n             }}>\r\n          <div className={[styles.chip, styles[currentPlayer]].join(' ')}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CurrentPlayerDashboard;","import CurrentPlayerDashboard from './CurrentPlayerDashboard';\r\n\r\nexport default CurrentPlayerDashboard;","import styles from './PlayerDashboard.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport store from '../../store/store'\r\n\r\nfunction PlayerDashboard(props) {\r\n  const player = props.player;\r\n\r\n  const state = store.getState();\r\n\r\n  const lastPlayerColor = useSelector(state => state.gameBoard.lastDiscDropCell.discColor);\r\n  const { isGameOver } = state.appNavigation;\r\n  const { players } = state;\r\n\r\n  let moves = (player === state.players.playerOne.color)\r\n      ? players.playerOne.moves\r\n      : players.playerTwo.moves;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.player}>\r\n          <div className={styles.title}>Player</div>\r\n          <div className={[styles.chip, styles[player]].join(' ')}></div>\r\n        </div>\r\n        <div className={styles.moves}>Moves: {moves}</div>\r\n        { (isGameOver && player === lastPlayerColor)\r\n          && <div className={styles.winner}>WINNER!!!</div>}\r\n      </div>\r\n  );\r\n}\r\n\r\nPlayerDashboard.propTypes = {\r\n  player: PropTypes.string\r\n};\r\n\r\nexport default PlayerDashboard;\r\n","import PlayerDashboard from './PlayerDashboard';\r\n\r\nexport default PlayerDashboard;","import React from 'react';\r\nimport styles from './Timer.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport store from '../../store/store';\r\nimport { stopTimerAction } from '../../store/actions/stopTimer';\r\n\r\nfunction Timer() {\r\n\r\n  const state = store.getState();\r\n  const { isGameOver } = state.appNavigation;\r\n  const dispatch = useDispatch();\r\n\r\n  const [ time, setTime ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isGameOver) return;\r\n    const timerID = setInterval(\r\n        () => setTime(time + 1),\r\n        1000\r\n    );\r\n    return () => clearInterval(timerID);\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(stopTimerAction(time));\r\n  }, [isGameOver]);\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  const addZero = (num) => {\r\n    return ((parseInt(num, 10) < 10) ? '0' : '') + num;\r\n  };\r\n\r\n  return (\r\n      <div className={styles.time}>Time: {addZero(min)}:{addZero(sec)}</div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import Timer from './Timer';\r\n\r\nexport default Timer;","export const stopTimerAction = (time) => {\r\n  return {\r\n    type: 'STOP_TIMER',\r\n    payload: {\r\n      time\r\n    }\r\n  }\r\n};","import WinnerPopup from './WinnerPopup';\r\n\r\nexport default WinnerPopup;","import styles from './WinnerPopup.module.css';\r\nimport store from '../../store/store';\r\n\r\nconst WinnerPopup = () => {\r\n  const state = store.getState();\r\n  const { color, moves, time } = state.winner;\r\n\r\n  \r\n\r\n  return (\r\n      <div className={styles.popupWrapper}>\r\n        <div className={styles.popupWindow}>\r\n          <div>Player {color} WINS</div>\r\n          <div>Moves: {moves}</div>\r\n          <div>Time: {time}</div>\r\n        </div>\r\n        <div className={styles.popupOverlay}></div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default WinnerPopup;","import { useDispatch } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport styles from './ReturnToStartScreenBtn.module.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction ReturnToStartScreenBtn() {\r\n  const dispatch = useDispatch();\r\n\r\n  const returnToStartScreen = () => dispatch(returnToStartScreenAction());\r\n\r\n  return (\r\n      <Link to={'/'} className={styles.button} onClick={returnToStartScreen}>Back to menu</Link>\r\n  );\r\n}\r\n\r\nexport default ReturnToStartScreenBtn;","import ReturnToStartScreenBtn from './ReturnToStartScreenBtn';\r\n\r\nexport default ReturnToStartScreenBtn;","export const returnToStartScreenAction = () => {\r\n  return {\r\n    type: 'RETURN_TO_START_SCREEN'\r\n  }\r\n};","import styles from './Game.module.css';\r\nimport GameBoard from '../GameBoard';\r\nimport CurrentPlayerDashboard from '../CurrentPlayerDashboard';\r\nimport PlayerDashboard from '../PlayerDashboard';\r\nimport store from '../../store/store';\r\nimport Timer from '../Timer';\r\nimport WinnerPopup from '../../components/WinnerPopup';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { returnToStartScreenAction } from '../../store/actions/returnToStartScreen';\r\nimport { saveWinnerAction } from '../../store/actions/saveWinner';\r\n\r\nfunction Game() {\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = useSelector(state => state.appNavigation.isGameOver);\r\n  const isWin = useSelector(state => state.winner.isWin);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //component will unmount - clear gameBoard state when go back by browser\r\n  useEffect(() => {\r\n    return () => dispatch(returnToStartScreenAction());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const color = state.gameBoard.lastDiscDropCell.discColor;\r\n    const moves = (color === playerOne.color) ? state.players.playerOne.moves : state.players.playerTwo.moves;\r\n\r\n    dispatch(saveWinnerAction(color, moves));\r\n  }, [isGameOver]);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div className={styles.gameWrapper}>\r\n          <PlayerDashboard player={playerOne.color}/>\r\n          <div>\r\n            <CurrentPlayerDashboard/>\r\n            <GameBoard/>\r\n          </div>\r\n          <PlayerDashboard player={playerTwo.color}/>\r\n        </div>\r\n        <div className={styles.timeWrapper}>\r\n          <Timer/>\r\n        </div>\r\n        {isWin && <WinnerPopup/>}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './Game';\r\n\r\nexport default Game;","export const saveWinnerAction = (color, moves) => {\r\n  return {\r\n    type: 'SAVE_WINNER',\r\n    payload: {\r\n      color,\r\n      moves\r\n    }\r\n  }\r\n};","import styles from './Settings.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\n\r\nfunction Settings() {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Settings</h2>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import Settings from './Settings';\r\n\r\nexport default Settings;","import styles from './BestScores.module.css';\r\nimport ReturnToStartScreenBtn from '../ReturnToStartScreenBtn'\r\n\r\nfunction BestScores() {\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.navWrapper}>\r\n          <ReturnToStartScreenBtn/>\r\n        </div>\r\n        <div>\r\n          <h2 className={styles.title}>Best Scores</h2>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default BestScores;","import BestScores from './BestScores';\r\n\r\nexport default BestScores;","import styles from './App.module.css';\nimport StartScreen from '../StartScreen/StartScreen';\nimport { Switch, Route } from 'react-router-dom';\nimport Game from '../Game';\nimport Settings from '../Settings';\nimport BestScores from '../BestScores';\n\nfunction App() {\n\n  return (\n    <div className={styles.appWrapper}>\n      App: CONNECT FOUR (beta)\n      <Switch>\n        <Route exact path={'/'} component={StartScreen} />\n        <Route path={'/game'} component={Game} />\n        <Route path={'/settings'} component={Settings} />\n        <Route path={'/bestscores'} component={BestScores} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}