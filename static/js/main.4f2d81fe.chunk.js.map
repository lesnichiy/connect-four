{"version":3,"sources":["components/GameBoard/GameBoardCell/GameBoardCell.module.css","components/App/App.module.css","components/GameBoard/GameBoard.module.css","components/Timer/Timer.module.css","components/StartScreen/StartScreen.js","store/actions/gameOnOff.js","store/actions/startScreenOnOff.js","store/reducers/gameBoard.js","store/reducers/appNavigation.js","store/reducers/players.js","store/reducers/index.js","store/store.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/GameBoard/GameBoardCell/index.js","store/actions/changePlayer.js","store/actions/dropDiscToColumn.js","store/actions/countMovesRed.js","store/actions/countMovesYellow.js","store/actions/gameOver.js","utils/checkWinner.js","store/actions/currentColCursorOver.js","components/GameBoard/GameBoard.js","components/GameBoard/index.js","components/CurrentPlayerDashboard/CurrentPlayerDashboard.js","components/CurrentPlayerDashboard/index.js","components/PlayerDashboard/PlayerDashboard.js","components/PlayerDashboard/index.js","components/Timer/Timer.js","components/Timer/index.js","components/Game/Game.js","components/Game/index.js","store/actions/closeGame.js","components/App/App.js","components/App/index.js","index.js","components/PlayerDashboard/PlayerDashboard.module.css","components/Game/Game.module.css","components/StartScreen/StartScreen.module.css","components/CurrentPlayerDashboard/CurrentPlayerDashboard.module.css"],"names":["module","exports","StartScreen","props","isGameOn","useSelector","state","appNavigation","isStartScreenOn","dispatch","useDispatch","className","styles","wrapper","button","onClick","e","preventDefault","type","payload","gameOnOffAction","startGame","startScreenOnOffAction","startScreenShowHide","initialState","lastDiscDropCell","discColor","col","row","currentColCursorOver","currentPlayer","board","isSettingsOn","isBestScoresOn","isGameOver","playerOne","color","moves","playerTwo","combineReducers","gameBoard","action","player","newBoard","slice","push","length","colNum","players","store","createStore","reducer","subscribe","console","log","getState","GameBoardCell","handleClickByCell","rowNum","currentCellColor","cellColorClass","changePlayerAction","dropDiscToColumnAction","dropDiscToColumn","countMovesRedAction","countMovesRed","countMovesYellowAction","countMovesYellow","gameOverAction","gameOver","currentBoardArray","isWinner","countSameCell","i","checkHorizontal","checkVertical","j","checkPrimaryDiagonal","checkSecondaryDiagonal","checkWinner","onMouseOver","currentColCursorOverAction","changeCurrentColNum","cell","join","GameBoard","cells","CurrentPlayerDashboard","currentCol","style","left","chip","PlayerDashboard","lastPlayerColor","title","winner","Timer","useState","time","setTime","useEffect","timerID","setInterval","clearInterval","min","Math","floor","sec","addZero","num","parseInt","Game","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f2d81fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoardCell_wrapper__1PVEo\",\"cell\":\"GameBoardCell_cell__2Z2tO\",\"red\":\"GameBoardCell_red__3HNmv\",\"yellow\":\"GameBoardCell_yellow__3cktr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-wrapper\":\"App_app-wrapper__l2jfx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameBoard_wrapper__10nTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Timer_time__1MZ_W\"};","import styles from './StartScreen.module.css';\r\nimport { gameOnOffAction } from '../../store/actions/gameOnOff';\r\nimport { startScreenOnOffAction } from '../../store/actions/startScreenOnOff';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction StartScreen(props) {\r\n\r\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\r\n  const isStartScreenOn = useSelector(state => state.appNavigation.isStartScreenOn);\r\n  const dispatch = useDispatch();\r\n  const startGame = (isGameOn) => dispatch(gameOnOffAction(isGameOn));\r\n  const startScreenShowHide = (isStartScreenOn) => dispatch(startScreenOnOffAction(isStartScreenOn));\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <button className={styles.button}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  startGame(isGameOn);\r\n                  startScreenShowHide(isStartScreenOn);\r\n                }}>Start Game</button>\r\n        <button className={styles.button}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                }}>Settings</button>\r\n        <button className={styles.button}\r\n                onClick={(e) => {e.preventDefault();\r\n                }}>Best Scores</button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default StartScreen;","export const gameOnOffAction = (isGameOn) => {\r\n  return {\r\n    type: 'GAME_ON_OFF',\r\n    payload: {\r\n      isGameOn: isGameOn\r\n    }\r\n  };\r\n};","export const startScreenOnOffAction = (isStartScreenOn) => {\r\n  return {\r\n    type: 'START_SCREEN_ON_OFF',\r\n    payload: {\r\n      isStartScreenOn\r\n    }\r\n  };\r\n};","const initialState = {\r\n  lastDiscDropCell: {\r\n    discColor: '',\r\n    col: null,\r\n    row: null\r\n  },\r\n  currentColCursorOver: 0,\r\n  currentPlayer: 'red',\r\n  board: [\r\n    [], // col 0 - row 0 is bottom, row 5 is top\r\n    [], // col 1\r\n    [], // col 2\r\n    [], // col 3\r\n    [], // col 4\r\n    [], // col 5\r\n    [], // col 6\r\n  ]\r\n};\r\n\r\nconst gameBoard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_PLAYER': {\r\n      const { player } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          currentPlayer: player\r\n      };\r\n    }\r\n    case 'DROP_DISC_TO_COLUMN': {\r\n      const { col, currentPlayer } = action.payload;\r\n      const newBoard = state.board.slice();\r\n      newBoard[col].push(currentPlayer);\r\n      const row = newBoard[col].length - 1;\r\n\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        lastDiscDropCell: {\r\n          discColor: currentPlayer,\r\n          col: col,\r\n          row: row\r\n        }\r\n      };\r\n    }\r\n    case 'CHANGE_CURRENT_COL_CURSOR_OVER': {\r\n      const { colNum } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentColCursorOver: colNum\r\n      };\r\n    }\r\n    case 'CLOSE_GAME': {\r\n      return {\r\n        ...state,\r\n        lastDiscDropCell: {\r\n          discColor: '',\r\n          col: null,\r\n          row: null\r\n        },\r\n        currentColCursorOver: 0,\r\n        currentPlayer: 'red',\r\n        board: [\r\n          [], // col 0 - row 0 is bottom, row 5 is top\r\n          [], // col 1\r\n          [], // col 2\r\n          [], // col 3\r\n          [], // col 4\r\n          [], // col 5\r\n          [], // col 6\r\n        ]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { gameBoard };","const initialState = {\r\n  isStartScreenOn: true,\r\n  isGameOn: false,\r\n  isSettingsOn: false,\r\n  isBestScoresOn: false,\r\n  isGameOver: false\r\n};\r\n\r\nconst appNavigation = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'START_SCREEN_ON_OFF': {\r\n      const { isStartScreenOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isStartScreenOn: !isStartScreenOn\r\n      }\r\n    }\r\n    case 'GAME_ON_OFF': {\r\n      const { isGameOn } = action.payload;\r\n\r\n      return {\r\n          ...state,\r\n          isGameOn: !isGameOn\r\n      }\r\n    }\r\n    case 'SETTINGS_ON_OFF': {\r\n      const { isSettingsOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isSettingsOn\r\n      }\r\n    }\r\n    case 'BEST_SCORES_ON_OFF': {\r\n      const { isBestScoresOn } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isBestScoresOn\r\n      }\r\n    }\r\n    case 'GAME_OVER': {\r\n      const { isGameOver } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        isGameOver: isGameOver\r\n      }\r\n    }\r\n    case 'CLOSE_GAME': {\r\n      return {\r\n        ...state,\r\n        isStartScreenOn: true,\r\n        isGameOn: false,\r\n        isSettingsOn: false,\r\n        isBestScoresOn: false,\r\n        isGameOver: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n};\r\n\r\nexport { appNavigation };","const initialState = {\r\n  playerOne: {\r\n    color: 'red',\r\n    moves: 0\r\n  },\r\n  playerTwo: {\r\n    color: 'yellow',\r\n    moves: 0\r\n  }\r\n};\r\n\r\nconst players = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COUNT_MOVES_RED': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerOne.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'COUNT_MOVES_YELLOW': {\r\n      const { player } = action.payload;\r\n      let moves = state.playerTwo.moves;\r\n      moves += 1;\r\n\r\n      return {\r\n        ...state,\r\n        playerTwo: {\r\n          color: player,\r\n          moves\r\n        }\r\n      };\r\n    }\r\n    case 'CLOSE_GAME': {\r\n      return {\r\n        ...state,\r\n        playerOne: {\r\n          color: 'red',\r\n          moves: 0\r\n        },\r\n        playerTwo: {\r\n          color: 'yellow',\r\n          moves: 0\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { players };","import { combineReducers } from 'redux';\r\nimport { gameBoard } from './gameBoard';\r\nimport { appNavigation } from './appNavigation';\r\nimport { players } from './players';\r\n\r\nexport default combineReducers({ gameBoard, appNavigation, players });","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\nexport default store;","import PropTypes from 'prop-types';\r\nimport styles from './GameBoardCell.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlayerAction } from '../../../store/actions/changePlayer';\r\nimport { dropDiscToColumnAction } from '../../../store/actions/dropDiscToColumn';\r\nimport { countMovesRedAction } from '../../../store/actions/countMovesRed';\r\nimport { countMovesYellowAction } from '../../../store/actions/countMovesYellow';\r\nimport { currentColCursorOverAction } from '../../../store/actions/currentColCursorOver';\r\nimport store from '../../../store/store';\r\nimport { checkWinner } from '../../../utils/checkWinner';\r\nimport { gameOverAction } from '../../../store/actions/gameOver';\r\n\r\nfunction GameBoardCell(props) {\r\n  const { rowNum, colNum } = props;\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const isGameOver = state.appNavigation.isGameOver;\r\n\r\n  const dispatch = useDispatch();\r\n  const currentPlayer = useSelector( state => state.gameBoard.currentPlayer );\r\n  const changePlayer = (player) => {\r\n    player = (player === playerOne.color) ? playerTwo.color : playerOne.color;\r\n    return dispatch(changePlayerAction(player));\r\n  };\r\n\r\n  const dropDiscToColumn = (col, player) => dispatch(dropDiscToColumnAction(col, player));\r\n  const countMovesRed = (player) => dispatch(countMovesRedAction(player));\r\n  const countMovesYellow = (player) => dispatch(countMovesYellowAction(player));\r\n  const gameOver = (isGameOver) => dispatch(gameOverAction(isGameOver));\r\n\r\n  // define class for current cell\r\n  const currentCellColor = state.gameBoard.board[colNum][rowNum];\r\n  const cellColorClass = (currentCellColor) ? currentCellColor : '' ;\r\n\r\n  //define func by condition. Lock Click if Game Over\r\n  let handleClickByCell;\r\n  if (isGameOver) {\r\n    handleClickByCell = () => {};\r\n  } else {\r\n    handleClickByCell = () => {\r\n      if ( state.gameBoard.board[colNum].length < 6 ) {\r\n        changePlayer(currentPlayer);\r\n        dropDiscToColumn(colNum, currentPlayer);\r\n        if (currentPlayer === playerOne.color) countMovesRed(currentPlayer);\r\n        if (currentPlayer === playerTwo.color) countMovesYellow(currentPlayer);\r\n        gameOver(checkWinner());\r\n      }\r\n    };\r\n  }\r\n\r\n  const changeCurrentColNum = (colNum) => dispatch(currentColCursorOverAction(colNum));\r\n\r\n  const handleMouseOver = () => {\r\n    changeCurrentColNum(colNum);\r\n  };\r\n\r\n  return (\r\n      <div\r\n          className={styles.wrapper}\r\n          onClick={handleClickByCell}\r\n          onMouseOver={handleMouseOver}\r\n      >\r\n        <div className={[styles.cell, styles[cellColorClass]].join(' ')}>\r\n          {/*row: {rowNum}, col: {colNum}*/}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nGameBoardCell.propTypes = {\r\n  rowNum: PropTypes.number,\r\n  colNum: PropTypes.number,\r\n};\r\n\r\nexport default GameBoardCell;","import GameBoardCell from './GameBoardCell';\r\n\r\nexport default GameBoardCell;","export const changePlayerAction = (player) => {\r\n  return {\r\n    type: 'CHANGE_PLAYER',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const dropDiscToColumnAction = (col, player) => {\r\n  return {\r\n    type: 'DROP_DISC_TO_COLUMN',\r\n    payload: {\r\n      col: col,\r\n      currentPlayer: player\r\n    }\r\n  }\r\n};","export const countMovesRedAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_RED',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const countMovesYellowAction = (player) => {\r\n  return {\r\n    type: 'COUNT_MOVES_YELLOW',\r\n    payload: {\r\n      player: player\r\n    }\r\n  }\r\n};","export const gameOverAction = (isGameOver) => {\r\n  return {\r\n    type: 'GAME_OVER',\r\n    payload: {\r\n      isGameOver: isGameOver\r\n    }\r\n  }\r\n};","import store from '../store/store';\r\n\r\nexport const checkWinner = () => {\r\n  const state = store.getState();\r\n  const { col, row, discColor } = state.gameBoard.lastDiscDropCell;\r\n  const currentBoardArray = state.gameBoard.board;\r\n\r\n  let isWinner = false;\r\n\r\n  const checkHorizontal = () => {\r\n    let countSameCell = 1;\r\n    //horizontal check\r\n    // go right\r\n    for (let i = col + 1; i <= 6; i++) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go left\r\n    for (let i = col - 1; i >= 0; i--) {\r\n      if (currentBoardArray[i][row] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkVertical = () => {\r\n    let countSameCell = 1;\r\n    //vertical check\r\n    // go to bottom\r\n    for (let i = row - 1; i >= 0; i--) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go to up\r\n    for (let i = row + 1; i <= 5; i++) {\r\n      if (currentBoardArray[col][i] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkPrimaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Primary diagonal check\r\n    // go down\r\n    for (let i = col + 1, j = row - 1; (i <= 6 && j >= 0); i++, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col - 1, j = row + 1; (i >= 0 && j <= 5); i--, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  const checkSecondaryDiagonal = () => {\r\n    let countSameCell = 1;\r\n    //Secondary diagonal check\r\n    // go down\r\n    for (let i = col - 1, j = row - 1; (i >= 0 && j >= 0); i--, j--) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    //go up\r\n    for (let i = col + 1, j = row + 1; (i <= 6 && j <= 5); i++, j++) {\r\n      if (currentBoardArray[i][j] === discColor) {\r\n        countSameCell++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return (countSameCell >= 4);\r\n  };\r\n\r\n  if (checkHorizontal()\r\n      || checkVertical()\r\n      || checkPrimaryDiagonal()\r\n      || checkSecondaryDiagonal()\r\n  )\r\n  {\r\n    console.log(discColor, ' is WIN ');\r\n    isWinner = true;\r\n  }\r\n\r\n  return isWinner;\r\n};","export const currentColCursorOverAction = (colNum) => {\r\n  return {\r\n    type: 'CHANGE_CURRENT_COL_CURSOR_OVER',\r\n    payload: {\r\n      colNum\r\n    }\r\n  };\r\n};","import styles from './GameBoard.module.css';\nimport GameBoardCell from './GameBoardCell';\n\nfunction GameBoard() {\n\n  const cells = [];\n\n\n  //Create GameBoard\n  for (let i = 5; i >=0; i--) {\n    const row = [];\n\n    for (let j = 0; j <= 6; j++) {\n      row.push(<GameBoardCell key={`${i}${j}`} rowNum={i} colNum={j} />);\n    }\n    cells.push(row);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {cells}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import { useSelector } from 'react-redux';\r\nimport styles from './CurrentPlayerDashboard.module.css';\r\n\r\nfunction CurrentPlayerDashboard(props) {\r\n  const currentPlayer = useSelector(state => state.gameBoard.currentPlayer);\r\n\r\n  const currentCol = useSelector(state => state.gameBoard.currentColCursorOver);\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        {/*Current Player:*/}\r\n        <div className={styles['chip-wrapper']}\r\n             style={{\r\n               left: currentCol * 50 //shift on 50px - width of cell\r\n             }}>\r\n          <div className={[styles.chip, styles[currentPlayer]].join(' ')}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CurrentPlayerDashboard;","import CurrentPlayerDashboard from './CurrentPlayerDashboard';\r\n\r\nexport default CurrentPlayerDashboard;","import styles from './PlayerDashboard.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport store from '../../store/store'\r\n\r\nfunction PlayerDashboard(props) {\r\n  const player = props.player;\r\n\r\n  const state = store.getState();\r\n\r\n  const players = useSelector(state => state.players);\r\n  const isGameOver = useSelector(state => state.appNavigation.isGameOver);\r\n  const lastPlayerColor = useSelector(state => state.gameBoard.lastDiscDropCell.discColor);\r\n\r\n  let moves = (player === state.players.playerOne.color)\r\n      ? players.playerOne.moves\r\n      : players.playerTwo.moves;\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.player}>\r\n          <div className={styles.title}>Player</div>\r\n          <div className={[styles.chip, styles[player]].join(' ')}></div>\r\n        </div>\r\n        <div className={styles.moves}>Moves: {moves}</div>\r\n        { (isGameOver && player === lastPlayerColor)\r\n          && <div className={styles.winner}>WINNER!!!</div>}\r\n      </div>\r\n  );\r\n}\r\n\r\nPlayerDashboard.propTypes = {\r\n  player: PropTypes.string\r\n};\r\n\r\nexport default PlayerDashboard;\r\n","import PlayerDashboard from './PlayerDashboard';\r\n\r\nexport default PlayerDashboard;","import React from 'react';\r\nimport styles from './Timer.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport store from '../../store/store';\r\n\r\nfunction Timer(props) {\r\n\r\n  const state = store.getState();\r\n  const { isGameOver } = state.appNavigation;\r\n\r\n  const [ time, setTime ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isGameOver) return;\r\n    const timerID = setInterval(\r\n        () => setTime(time + 1),\r\n        1000\r\n    );\r\n    return () => clearInterval(timerID);\r\n  });\r\n\r\n  const min = Math.floor(time / 60);\r\n  const sec = time % 60;\r\n\r\n  const addZero = (num) => {\r\n    return ((parseInt(num, 10) < 10) ? '0' : '') + num;\r\n  };\r\n\r\n  return (\r\n      <div className={styles.time}>Time: {addZero(min)}:{addZero(sec)}</div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import Timer from './Timer';\r\n\r\nexport default Timer;","import styles from './Game.module.css';\r\nimport GameBoard from '../GameBoard';\r\nimport CurrentPlayerDashboard from '../CurrentPlayerDashboard';\r\nimport PlayerDashboard from '../PlayerDashboard';\r\nimport store from '../../store/store';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeGameAction } from '../../store/actions/closeGame';\r\nimport Timer from '../Timer';\r\n\r\nfunction Game(props) {\r\n\r\n  const state = store.getState();\r\n  const { playerOne, playerTwo } = state.players;\r\n  const dispatch = useDispatch();\r\n\r\n  const closeGame = () => dispatch(closeGameAction());\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles['nav-wrapper']}>\r\n          <button className={styles.button} onClick={(e) => {\r\n            e.preventDefault();\r\n            closeGame();\r\n          }}>Back to menu</button>\r\n        </div>\r\n        <div className={styles['game-wrapper']}>\r\n          <PlayerDashboard player={playerOne.color}/>\r\n          <div>\r\n            <CurrentPlayerDashboard/>\r\n            <GameBoard/>\r\n          </div>\r\n          <PlayerDashboard player={playerTwo.color}/>\r\n        </div>\r\n        <div className={styles['time-wrapper']}>\r\n          <Timer/>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './Game';\r\n\r\nexport default Game;","export const closeGameAction = () => {\r\n  return {\r\n    type: 'CLOSE_GAME'\r\n  }\r\n};","import styles from './App.module.css';\nimport StartScreen from '../StartScreen/StartScreen';\nimport { useSelector } from 'react-redux';\nimport Game from '../Game';\n\nfunction App(props) {\n\n  const isGameOn = useSelector(state => state.appNavigation.isGameOn);\n  const isStartScreenOn = useSelector(state => state.appNavigation.isStartScreenOn);\n\n  return (\n    <div className={styles['app-wrapper']}>\n      App: CONNECT FOUR (beta)\n      {isStartScreenOn && <StartScreen/>}\n      {isGameOn && <Game/>}\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayerDashboard_wrapper__3nRYp\",\"player\":\"PlayerDashboard_player__CpWVs\",\"moves\":\"PlayerDashboard_moves__1YVks\",\"title\":\"PlayerDashboard_title__2R2El\",\"chip\":\"PlayerDashboard_chip__3-EPz\",\"red\":\"PlayerDashboard_red__r7CtE\",\"yellow\":\"PlayerDashboard_yellow__gkkE5\",\"winner\":\"PlayerDashboard_winner__17AA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__AT8P3\",\"nav-wrapper\":\"Game_nav-wrapper__1BTj0\",\"game-wrapper\":\"Game_game-wrapper__1IEdb\",\"button\":\"Game_button__gDzRX\",\"time-wrapper\":\"Game_time-wrapper__eyjE8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StartScreen_wrapper__2GBHR\",\"button\":\"StartScreen_button__3fQxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CurrentPlayerDashboard_wrapper__D11zR\",\"chip-wrapper\":\"CurrentPlayerDashboard_chip-wrapper__1CpMj\",\"chip\":\"CurrentPlayerDashboard_chip__3Mqty\",\"red\":\"CurrentPlayerDashboard_red__15Sgo\",\"yellow\":\"CurrentPlayerDashboard_yellow__OGj4d\"};"],"sourceRoot":""}